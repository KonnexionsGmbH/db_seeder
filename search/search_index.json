{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DBSeeder - Relational Database Data Generator. 1. Introduction DBSeeder allows the flexible generation of large amounts of anonymised random dummy data for selected relational database systems (RDBMS) - useful e.g. for stress testing. The database schema underlying the data generation can be freely defined. The names of the database, the schema and the user can be freely chosen, unless the respective database management system contains restrictions. If the selected database, schema or user already exist, they are deleted with all including data. DBSeeder then creates the selected database, schema or user and generates the desired dummy data. A maximum of 2 147 483 647 rows can be generated per database table. The database schema to be used, that is, the required database tables can be user defined using a JSON file. Details can be found here: Database Schema . Currently, depending on the capabilities of the specific RDBMS, the following functionalities and data types are supported: constraints foreign (referential) key not null constraint primary key unique (alternate) key data types BIGINT - large integer BLOB - large binary object CLOB - large character Object TIMESTAMP - timestamp including date VARCHAR - variable text The database systems considered meet the following conditions: The database system is freely available in a documented docker image for testing purposes. The database system provides a well documented JDBC interface. A complete documentation of the SQL commands is available. 1.1 RDBMS Overview RDBMS Ticker Symbol(s) RDBMS Versions Latest JDBC AgensGraph agens v2.1.1 - v2.13.0 1.4.2-c1 Apache Derby derby, derby_emb 10.16.1.1 10.16.1.1 CockroachDB cockroach v20.2.5 - v22.1.12 see PostgreSQL CrateDB cratedb 4.1.6 - 5.1.12 2.6.0 CUBRID cubrid 10.2 - 11.2 11.1.0.0028 Exasol exasol 6.2.8-d1 - 7.1.16 7.1.16 Firebird firebird 3.0.5 - v4.0.2 4.0.8.java11 H2 Database Engine h2, h2_emb 1.4.200 - 2.1.214 2.1.214 HeavyDB heavy v5.6.1 - v6.2.0 6.1.0 HSQLDB hsqldb, hsqldb_emb 2.5.1 - 2.7.1 2.7.1 IBM Db2 Database ibmdb2 11.5.1.0 - 11.5.8.0 11.5.8.0 IBM Informix informix 14.10 FC3DE - 4.50.9 14.10.FC7W1DE MariaDB Server mariadb 10.4.13 - 10.10.2 3.1.0 Mimer SQL mimer v11.0.3c - v11.0.5a 3.42.3 MonetDB monetdb Jun2020-SP1 - Sep2022-SP1 3.2.jre8 MySQL Database mysql 8.0.20 - 8.0.31 8.0.31 Oracle Database oracle 12.1.0.2 - 21.3.0 21.8.0.0 Percona Server for MySQL percona 8.0.28-20 - 8.0.30-22 see MySQL PostgreSQL postgresql 12.3 - 15.1-alpine 42.5.1 SQL Server sqlserver 2019-CU12-ubuntu-20.04 - 11.2.2.jre18 2022-latest SQLite sqlite 3.40.0.0 TimescaleDB timescale 2.3.1-pg13 - 2.9.0-pg14 see PostgreSQL trino mysql_trino, 339 - 403 403 oracle_trino, postgresql_trino, sqlserver_trino VoltDB voltdb 9.2.1 11.4.2 YugabyteDB yugabyte 2.2.2.0-b15 - see PostgreSQL 2.17.0.0-b24 1.2 RDBMS Directory The following database systems are included in the current version of DBSeeder : AgensGraph client only version commercial, open source derived from PostgreSQL property graph model and relational model Apache Derby client and embedded version open source relational model CockroachDB client only version commercial, open source compatible with PostgreSQL JDBC relational model CrateDB client only version commercial, open source compatible with PostgreSQL relational model CUBRID client only version compatible with MySQL open source relational model Exasol client only version commercial in-memory, column-oriented, relational model Firebird client and embedded (not supported here) version open source relational model H2 Database Engine client and embedded version compatible with HSQLDB, PostgreSQL open source relational model HeavyDB client only version commercial, open source GPU and CPU version relational model HSQLDB client and embedded version open source relational model IBM Db2 Database client only version commercial relational model IBM Informix client only version commercial relational model MariaDB Server client only version open source derived from MySQL relational model Mimer SQL client only version commercial relational model MonetDB client only version open source column-oriented relational model MySQL Database client only version open source relational model Oracle Database client only version commercial relational model Percona Server for MySQL client only version commercial, open source derived from MySQL relational model PostgreSQL client only version open source relational model SQL Server client only version commercial derived from Adaptive Server Enterprise relational model SQLite commercial, open source embedded only version relational model TimescaleDB client only version commercial, open source derived from PostgreSQL relational model trino compatible with Accumulo, Cassandra, Elasticsearch, Hive, Kudu, MongoDB, MySQL, Pinot, PostgreSQL, Redis, Redshift distributed query engine open source For the RDBMS MySQL, Oracle, PostgreSQL and SQL Server the JDBC driver from trino can optionally be used instead of the original JDBC driver. The prerequisite for this is that trino is either installed locally (Linux) or is available as a Docker container (Linux and Windows). Details can be found here: trino . VoltDB client only version commercial, open source derived from H-Store, HSQLDB in-memory relational model YugabyteDB client only version commercial, open source compatible with Cassandra, PostgreSQL, Redis derived from PostgreSQL, RocksDB inspired by Cloud Spanner relational model 2. Data 2.1 Database Schema The underlying database schema is defined in a JSON-based parameter file and the associated program code is generated and compiled with the script scripts/run_db_seeder_generate_schema . To validate the database schema in the JSON parameter file, the JSON schema file db_seeder_schema.schema.json in the directory src/main/resources is used. 2.1.1 Structure of the Database Schema Definition File The definition of a database schema consists of the object global with the global parameters and the array tables , which contains the definition of the database tables. 2.1.1.1 globals - Global Parameters defaultNumberOfRows - default value for the number of table rows to be generated, if no value is specified in the table definition encodingISO_8859_1 - a string with Western Latin characters is inserted into generated character columns encodingUTF_8 - a string with simplified Chinese characters is inserted into generated character columns specified in the table definition nullFactor - determines the proportion of NULL values in optional columns and must be between 2 and 99 (inclusive): 2 means 50%, 4 means 25%, 10 means 10%, etc., default value is 4 2.1.1.2 tables - Database Table Definitions tableName - database table name numberOfRows - number of table rows to be generated columns - an array of column definitions columnName - column name dataType - data type, is one of BIGINT, BLOB, CLOB, TIMESTAMP or VARCHAR size - for data type VARCHAR the maximum size of the column value precision - currently not used notNull - is a NULL value allowed ? primaryKey - is this the primary key column ? references - an array of foreign key definitions referenceTable - name of the reference database table referenceColumn - name of the reference column defaultValueInteger - default value for integer columns defaultValueString - default value for alphanumeric columns lowerRangeInteger - lower limit for an integer column, requires also an upper limit lowerRangeString - lower limit for an alphanumeric column, requires also an upper limit upperRangeInteger - upper limit for an integer column upperRangeString - upper limit for an alphanumeric column validValuesInteger - valid values for an integer column validValuesString - valid values for an alphanumeric column tableConstraints - an array of table constraint definitions constraintType - constraint type, is one of FOREIGN, PRIMARY or UNIQUE columns - an arry with the names of the affected columns referenceTable - name of the reference database table, only for foreign keys referenceColumns - an arry with the names of the affected reference columns, only for foreign keys Only either a range restriction ( lowerRange... , upperRange... ) or a value restriction ( validValues... ) may be specified for each column. 2.1.2 Mapping of Data Types in the JDBC Driver Data Type JDBC Method BIGINT setLong BLOB setBytes CLOB setString TIMESTAMP setTimestamp VARCHAR setNString (Firebird, MariaDB, MS SQL SERVER and Oracle) setString (else) 2.1.3 Example File db_seeder_schema.company_9...9.json in the Directory resources/json This file contains the definition of a simple database schema consisting of the database tables CITY, COMPANY, COUNTRY, COUNTRY_STATE and TIMEZONE. The abbreviations in the following illustration (created with Toad Data Modeler) mean: (AK1) - alternate key (unique key) FK - foreign key NN - not null PK - primary key 2.2 Construction of the Dummy Data Content The proportion of NULL values in optional columns is defined by the global parameter nullFactor . All methods for generating column contents can be overwritten if necessary. 2.2.1 BIGINT Java method: getContentBigint If the column parameter validValuesInteger is defined in the database schema, a random value is taken from it. If the column parameters lowerRangeInteger and upperRangeInteger are defined in the database schema, a random value is taken from this interval. Otherwise the counter for the current row (row number) is used. 2.2.2 BLOB Java method: getContentBlob The content of the file blob.png from the resource directory ( src/main/resources ) is loaded into these columns.This file contains the company logo of Konnexions GmBH. 2.2.3 CLOB Java method: getContentClob The content of the file clob.md from the resource directory ( src/main/resources ) is loaded into these columns. This file contains the text of the Konnexions Public License (KX-PL). 2.2.4 TIMESTAMP Java method: getContentTimestamp A randomly generated timestamp is assigned to all columns that can contain temporal data. 2.2.5 VARCHAR Java method: getContentVarchar If the column parameter validValuesString is defined in the database schema, a random value is taken from it. If the column parameters lowerRangeString and upperRangeString are defined in the database schema, a random value is taken from this interval. Otherwise content of the column is constructed depending on the row number and the encoding flags as follows: ASCII (all rows where the index modulo 3 is 0): column name in capital letters underscore _ current row number left-justified ISO 8859 1 (all rows where the index modulo 3 is 1) : column name in capital letters underscore _ a string containing specific Western European characters with accent (e.g. French, Portuguese or Spanish) underscore _ current row number left-justified the ISO 8859 1 version can be prevented by choosing encodingISO_8859_1 false in the database schema definition UTF-8 (all rows where the index modulo 3 is 2): column name in capital letters underscore _ a string containing simplified Chinese characters underscore _ current row number left-justified the UTF-8 version can be prevented by choosing encodingUTF_8 false in the database schema definition If the resulting value exceeds the permissible column size, the value is shortened accordingly from the left 2.2.6 Examples 1. Table CITY 2. Table COUNTRY 3. Table TIMEZONE 3. Installation The easiest way is to download a current release of DBSeeder from the GitHub repository. You can find the necessary link here . To download the repository Git is needed and for compilation the Gradle Build Tool and the open-source JDK are needed. For changes to the DBSeeder repository it is best to use an editor (e.g. Vim ) or an IDE (e.g. Eclipse IDE ). For using the Docker Image based databases in operational mode, Docker Desktop must also be installed. For the respective software versions, please consult the document release notes . 4. Operating Instructions 4.1 Script run_db_seeder Using the DBSeeder development and operational Docker image from Docker Hub (see here ) eliminates the need to install the runtime environment. With the script run_db_seeder the complete functionality of the DBSeeder application can be used: Creating a suitable database Generation of any number of dummy data. All scripts are available in a Windows version ( cmd / .bat ) as well as in a Unix version ( bash / .sh ). To run the scripts, apart from the prerequisites as release notes ( ReleaseNotes.md ), only the libraries in the lib directory and the corresponding script of run_db_seeder are required. The creation of the databases also requires a working access to Docker Hub . All control parameters used in DBSeeder (see section 4.3) can be adapted in the scripts to specific needs. The run_db_seeder script is controlled by the following script parameters:: DB_SEEDER_DBMS : the ticker symbol of the desired database management system (default value sqlite ) or complete for all implemented RDBMS. DB_SEEDER_SETUP_DBMS : should an empty database be created: yes : a new database is created based on a suitable Docker image otherwise: no database is created DB_SEEDER_NO_CREATE_RUNS : Number of dummy data generation runs: 1: one run 2: two runs otherwise: no run For the run variants complete , complete_client , complete_emb and complete_trino , statistics files with the following data name structure are created in the file directory resources/statistics by default: db_seeder_<bash|cmd>_<run variant>_unknown_<DBSeeder release>_<vmware|win10|wsl2>.<csv|tsv> An overview of the structure of the scripts used can be taken from the following diagram: 4.2 Operation Possibilities DBSeeder is tested under Ubuntu and Microsoft Windows . In addition, tests are always performed in Windows with Ubuntu under the Windows Subsystem for Linux (WSL) . Besides one of the two operating systems, these are the minimum requirements for running DBSeeder : Docker Desktop Community Eclipse IDE Gradle Build Tool Java Development Kit Details on the required software versions can be found in the release notes . Special Features for the Operation with Ubuntu A suitable image is available on Docker Hub for development and operation, see here . In the directory scripts/3.0.6 are the two scripts run_install_4_vm_wsl2_1.sh and run_install_4_vm_wsl2_1.sh with which an Ubuntu environment can be prepared for development and operation. If the Windows Subsystem for Linux (WSL) is to be used, then the WSL INTEGRATION for Ubuntu must be activated in Docker 4.3 Control Parameters 4.3.1 Supported Parameters The flow control parameters for DBSeeder are stored in the properties file src/main/resources/db_seeder.properties and can all be overridden by the environment variables defined in the scripts. The following control parameters are currently supported: db_seeder.batch.size=0 db_seeder.character.set.server= db_seeder.collation.server= db_seeder.connection.host= db_seeder.connection.host.trino= db_seeder.connection.port=0 db_seeder.connection.port.trino=0 db_seeder.connection.prefix= db_seeder.connection.service= db_seeder.connection.suffix= db_seeder.database.sys= db_seeder.database= db_seeder.drop.constraints= db_seeder.file.configuration.name=yes db_seeder.file.improvement.header=DBMS;Type;ms;Constraints;Improvement db_seeder.file.improvement.name= db_seeder.file.json.name=resources/json/db_seeder_schema.company_5400.json db_seeder.file.statistics.delimiter=\\t db_seeder.file.statistics.header=ticker symbol;DBMS;db type;total ms;start time;end time;host name;no. cores;operating system;total DDL ms;drop constr. ms;add constr. ms;total DML ms;constraints db_seeder.file.statistics.name=resources/statistics/db_seeder_statistics.tsv db_seeder.file.summary.name= db_seeder.file.summary.source=resources/statistics db_seeder.password.sys= db_seeder.password= db_seeder.schema= db_seeder.user.sys= db_seeder.user= 4.3.2 Explanation and Cross-reference Property incl. Default Value [db.seeder.] Environment Variable [DB_SEEDER_] Used By Description batch.size=<9...9> BATCH_SIZE all RDBMS except number of insert operations for the bulk operation, default value 0 (a single bulk operation for each database table) character.set.server= CHARACTER_SET_SERVER mariadb default server character set collation.server= COLLATION_SERVER mariadb default server collation connection.host= CONNECTION_HOST all client RDBMS host name or ip address of the database server connection.host_trino= CONNECTION_HOST_TRINO trino host name or ip address of the trino connection.port=<9...9> CONNECTION_PORT all client RDBMS port number of the database server connection.port_trino=<9...9> CONNECTION_PORT_TRINO trino port number of the trino connection.prefix= CONNECTION_PREFIX all RDBMS prefix of the database connection string connection.service= CONNECTION_SERVICE oracle service name of the database connection string connection.suffix= CONNECTION_SUFFIX firebird, hsqldb, mysql, percona, voltdb suffix of the database connection string database.sys= DATABASE_SYS agens, cockroach, heavy, informix, mariadb, mimer, monetdb, mysql, percona, privileged database name postgresql, sqlserver, timescale, yugabyte database= DATABASE all RDBMS except cratedb, exasol, monetdb, oracle, voltdb database name drop.constraints= DROP_CONSTRAINTS all RDBMS except cockroach, cratedb, h2, heavy, sqlite, trino drop all contraints before the DML operations and recreate them afterwards file.configuration.name= FILE_CONFIGURATION_NAME n/a directory and file name of the DBSeeder configuration file file.improvement.header= FILE_IMPROVEMENT_HEADER all RDBMS header line of the improvement file created in run_db_seeder_compute_improvement file.improvement.name= FILE_IMPROVEMENT_NAME all RDBMS directory and file name of the DBSeeder improvement file created in run_db_seeder_compute_improvement file.json.name= FILE_JSON_NAME scripts/run_db_seeder_generate_schema directory and file name of the JSON file containing the database schema file.statistics.delimiter= FILE_STATISTICS_DELIMITER all RDBMS separator of the statistics file created in run_db_seeder file.statistics.header= FILE_STATISTICS_HEADER all RDBMS header line of the statistics file created in run_db_seeder file.statistics.name= FILE_STATISTICS_NAME all RDBMS file name of the statistics file created in run_db_seeder file.summary.name= FILE_SUMMARY_NAME all RDBMS file name of the summary statistics file created in run_db_seeder_create_summary file.summary.source= FILE_SUMMARY_SOURCE all RDBMS directory name(s) (separated by semicolon) of the source directories containing statistics files password.sys= PASSWORD_SYS agens, exasol, firebird, heavy, ibmdb2, informix, mariadb, mimer, monetdb, mysql, password of the privileged user oracle, percona, postgresql, sqlserver, timescale password= PASSWORD all RDBMS except cockroach, derby, ibmdb2, informix password of the normal user schema=kxn_schema SCHEMA agens, derby, exasol, h2, hsqldb, ibmdb2, monetdb, postgresql, sqlserver, schema name timescale, yugabyte user.sys= USER_SYS all RDBMS except derby, voltdb name of the privileged user user=kxn_user USER all RDBMS except derby, ibmdb2, informix name of the normal user 4.4 Statistics Each new release is completed with the creation of 7 statistics files in the file directory resources/statistics . The data contained in these files show the DDL and DML performance of the individual databases under identical conditions: Operating systems: Ubuntu with VMware Workstation Player, Ubuntu with WSL (Windoiws Subsystem for Linux) on Windows and Windows. ..._vmware.tsv : Ubuntu with VMware Workstation Player on Windows ...._win10.tsv : Windows 10 ....._wsl2.tsv : Ubuntu LTS with Windows Subsystem for Linux 2 on Windows DDL: Creation of the database schema consisting of the 5 relational tables CITY, COMPANY, COUNTRY, COUNTRY_STATE and TIMEZONE (see JSON file: resources/json/db_seeder_schema.company_5400.json ). DML: Insert records into these database tables - CITY 1800, COMPANY 5400, COUNTRY 200, COUNTRY_STATE 600 and TIMEZONE 11. If possible, two runs are made for each database system: one run with constraints enabled and one run with constraints disabled - see column constraints : active : constraints are enabled active - no choice : constraints are enabled and disabling is not possible inactive : constraints are disabled The creation of these statistics files is managed by the following control parameters ( see here ): db_seeder.file.improvement.header=DBMS;Type;ms;Constraints;Improvement db_seeder.file.improvement.name= db_seeder.file.statistics.delimiter=\\t db_seeder.file.statistics.header=ticker symbol;DBMS;db type;total ms;start time;end time;host name;no. cores;operating system;total DDL ms;drop constr. ms;add constr. ms;total DML ms;constraints db_seeder.file.statistics.name=resources/statistics/db_seeder_statistics.tsv db_seeder.file.summary.name= db_seeder.file.summary.source=resources/statistics 4.4.1 Detailed statistical data File name syntax : db_seeder_<bash|cmd>_complete_<company|syntax>_<DBSeeder version>_<vmware|wsl2|win10>.<csv|tsv> Explanation for the columns : ticker symbol - internal abbreviation used for the database DBMS - official DBMS name db type - client version, embedded version or via trino total ms - total time of DDL and DML operations in milliseconds start time - date and time when the database operations were started end time - date and time when the database operations were completed host name - name of the computer connected to a computer network no. cores - number of CPU cores used operating system total DDL ms - total time of DDL operations in milliseconds drop constr. ms - total time to drop all constraints add constr. ms - total time to add the previously dropped constraints total DML ms - total time of DML operations in milliseconds constraints - DML operations with enabled (active) or disabled (inactive) constraints (foreign, primary and unique key) 4.4.2 Performance data regarding constraints File name syntax : db_seeder_<bash|cmd>_improvement_<company|syntax>_<DBSeeder version>_<vmware|wsl2|win10>.<csv|tsv> Explanation for the columns : DBMS - official DBMS name Type - client version, embedded version or via trino ms - total time of DDL and DML operations in milliseconds Constraints - DML operations with enabled (active) or disabled (inactive) constraints (foreign, primary and unique key) Improvment - improvement of total time if constraints are inactive 4.4.3 Historical statistical data File name syntax : db_seeder_summary_<first DBSeeder version>-<current DBSeeder version>.<csv|tsv> Explanation for the columns : ticker symbol - internal abbreviation used for the database DBMS - official DBMS name version - DBSeeder version creator - shell environment: bash or cmd db type - client version, embedded version or via trino constraints - DML operations with enabled ( active and active - no choice ) or disabled ( inactive ) constraints (foreign, primary and unique key) schema - identification term for the scheme definition used: company or syntax total ms - total time of DDL and DML operations in milliseconds start time - date and time when the database operations were started end time - date and time when the database operations were completed host name - name of the computer connected to a computer network no. cores - number of CPU cores used operating system file name - name of the file with the source data total DDL ms - total time of DDL operations in milliseconds drop constr. ms - total time to drop all constraints add constr. ms - total time to add the previously dropped constraints total DML ms - total time of DML operations in milliseconds 5. RDBMS Specific Technical Details DBeaver is a great tool to analyze the database content. In the file directory resources/dbeaver you will also find a file exported from DBeaver with the connection parameters currently used in DBSeeder. 5.1 AgensGraph data types : DBSeeder Type AgensGraph Database Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE: see PostgreSQL CREATE SCHEMA: see PostgreSQL CREATE TABLE: see PostgreSQL CREATE USER: see PostgreSQL Docker image (latest) : pull command: docker pull bitnine/agensgraph:v2.13.0 DockerHub encoding : see PostgreSQL issue tracking : GitHub JDBC driver (latest) : version 1.4.2-c1 Maven repository source code : GitHub 5.2 Apache Derby data types : DBSeeder Type Apache Derby Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER - n/a Docker image (latest - only client version) : pull command: docker pull konnexionsgmbh/apache_derby:10.16.1.1 DockerHub encoding : by using the following JVM parameter: -Dderby.ui.codeset=UTF8 issue tracking : Jira JDBC driver (latest) : client version: Maven repository embedded version: Maven repository source code : Apache Derby DBeaver database connection settings : -- client version: 5.3 CockroachDB data types : DBSeeder Type CockroachDB Type BIGINT INT BLOB BYTES CLOB STRING TIMESTAMP TIMESTAMP VARCHAR STRING DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull cockroachdb/cockroach:latest DockerHub encoding : by default utf8 encoding issue tracking : GitHub JDBC driver (latest) : same as PostgreSQL privileged database access : user root source code : GitHub DBeaver database connection settings : 5.4 CrateDB data types : DBSeeder Type CrateDB Type BIGINT BIGINT BLOB OBJECT CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR TEXT DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: `docker pull crate:latest DockerHub encoding : by default utf8 encoding issue tracking : GitHub JDBC driver (latest) : JFrog Bintray repository privileged database access : user crate restrictions : no constraints (e.g. foreign keys or unique keys) no transaction concept no triggers only a very proprietary BLOB implementation source code : GitHub DBeaver database connection settings : 5.5 CUBRID data types : DBSeeder Type CUBRID Type BIGINT INT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull cubrid/cubrid:11.0 DockerHub encoding : by specifying after the database name when database is created: kxn_db de_DE.utf8 issue tracking : Jira JDBC driver (latest) : Maven repository privileged database access : users DBA and PUBLIC restrictions : no full UTF-8 support source code : GitHub DBeaver database connection settings : 5.6 Exasol data types : DBSeeder Type Exasol Type BIGINT BIGINT BLOB VARCHAR(2000000) CLOB VARCHAR(2000000) TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull exasol/docker-db:latest DockerHub JDBC driver (latest) : Maven repository privileged database access : user sys password exasol restrictions : no unique key constraints DBeaver database connection settings : 5.7 Firebird data types : DBSeeder Type Firebird Type BIGINT INTEGER BLOB BLOB CLOB BLOB SUB_TYPE 1 TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull jacobalberty/firebird:v4.0.2 DockerHub encoding : by using the following JDBC URL parameter: encoding=UTF8 issue tracking : GitHub JDBC driver (latest) : Maven repository privileged database access : user SYSDBA source code : GitHub DBeaver database connection settings : 5.8 H2 Database Engine data types : DBSeeder Type H2 Database Engine Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull konnexionsgmbh/h2_database_engine:2.1.214 DockerHub encoding : H2 internally uses Unicode, and supports all character encoding systems and character sets supported by the virtual machine you use. issue tracking : GitHub JDBC driver (latest) : Maven repository privileged database access : user sa source code : GitHub DBeaver database connection settings : -- client version: 5.9 HeavyDB data types : DBSeeder Type HeavyDB Type BIGINT BIGINT BLOB TEXT ENCODING NONE CLOB TEXT ENCODING NONE TIMESTAMP TIMESTAMP(0) VARCHAR TEXT ENCODING NONE DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull omnisci/core-os-cpu DockerHub encoding : no special configuration should be needed issue tracking : GitHub JDBC driver (latest) : Maven repository privileged database access : database: omnisci user: admin restrictions : column and table names case sensitive max. column length 32767 bytes no binary columns no constraints, e.g. unique keys no foreign / referential keys no primary key no triggerss source code : GitHub DBeaver database connection settings : 5.10 HSQLDB data types : DBSeeder Type HSQLDB Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull konnexionsgmbh/hypersql_database:latest DockerHub encoding : by using the following system property sqlfile.charset=UTF-8 . issue tracking : SourceForge JDBC driver (latest) : Maven repository privileged database access : user SA source code : SourceForge DBeaver database connection settings : -- client version: 5.11 IBM Db2 Database data types : DBSeeder Type IBM Db2 Database Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull ibmcom/db2:11.5.8.0 DockerHub encoding : by using the CCSID clause in the CREATE statements for any of the following objects: Database Table space Table procedure or function JDBC driver (latest) : Maven repository privileged database access : user db2inst1 restrictions : the IBM Db2 DBMS only accepts operating system accounts as database users DBeaver database connection settings : 5.12 IBM Informix data types : DBSeeder Type IBM Informix Database Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP DATETIME YEAR TO FRACTION VARCHAR VARCHAR (1-254) / LVARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull ibmcom/informix-developer-database:14.10.FC7W1DE DockerHub encoding : code-set conversion value is extracted from the DB_LOCALE value specified at the time the connection is made JDBC driver (latest) : Maven repository privileged database access : user informix password in4mix database / schema sysmaster INFORMIXSERVER informix restrictions : the IBM Informix DBMS only accepts operating system accounts or users mapped to operating system accounts as database users no named constraints in ALTER TABLE ADD CONSTRAINT DBeaver database connection settings : 5.13 MariaDB Server data types : DBSeeder Type MariaDB Type BIGINT BIGINT BLOB LONGBLOB CLOB LONGTEXT TIMESTAMP DATETIME VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mariadb:latest DockerHub encoding : server level: SET character_set_server = 'latin2'; database level: CHARACTER SET = 'keybcs2' table level: CHARACTER SET 'utf8' column level: CHARACTER SET 'greek' issue tracking : Jira JDBC driver (latest) : Maven repository privileged database access : user: mysql password; root source code : GitHub DBeaver database connection settings : 5.14 Mimer SQL data types : DBSeeder Type MimerSQL Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR NVARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mimersql/mimersql_v11.0.5a DockerHub encoding : NCHAR, NVARCHAR JDBC driver (latest) : Mimer Website privileged database access : database; mimerdb user: SYSADM DBeaver database connection settings : 5.15 MonetDB data types : DBSeeder Type MonetDB Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull monetdb/monetdb:Sep2022-SP1 DockerHub encoding : no special configuration should be needed issue tracking : GitHub JDBC driver (latest) : MonetDB Java Download Area privileged database access : database: demo user: monetdb password: monetdb source code : GitHub DBeaver database connection settings : 5.16 MySQL Database data types : DBSeeder Type MySQL Database Type BIGINT BIGINT BLOB LONGBLOB CLOB LONGTEXT TIMESTAMP DATETIME VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mysql:8.0.31 DockerHub encoding : for applications that store data using the default MySQL character set and collation (utf8mb4, utf8mb4_0900_ai_ci), no special configuration should be needed JDBC driver (latest) : Maven repository privileged database access : database: sys user: root source code : GitHub DBeaver database connection settings : 5.17 Oracle Database data types : DBSeeder Type Oracle Database Type BIGINT NUMBER BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR2 DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image : DockerHub encoding : since Oracle Database 12c Release 2 the default database character set used is the Unicode character set AL32UTF8 JDBC driver (latest) : Maven repository privileged database access : database: orclpdb1 user: SYS AS SYSDBA DBeaver database connection settings : 5.18 Percona Server for MySQL data types : DBSeeder Type Percona Sercver Type BIGINT BIGINT BLOB LONGBLOB CLOB LONGTEXT TIMESTAMP DATETIME VARCHAR VARCHAR DDL syntax : CREATE DATABASE: see MySQL Database CREATE SCHEMA - n/a CREATE TABLE: see MySQL Database CREATE USER: see MySQL Database Docker image (latest) : pull command: docker pull percona/percona-server:latest DockerHub encoding : for applications that store data using the default MySQL character set and collation (utf8mb4, utf8mb4_0900_ai_ci), no special configuration should be needed issue tracking : Jira JDBC driver (latest) : same as MySQL privileged database access : database: sys user: root source code : GitHub DBeaver database connection settings : 5.19 PostgreSQL data types : DBSeeder Type PostgreSQL Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull postgres:15.1-alpine DockerHub encoding : when creating the database: CREATE DATABASE testdb WITH ENCODING 'EUC_KR' ... issue tracking : PostgreSQL JDBC driver (latest) : Maven repository documentation : The PostgreSQL JDBC Interface release notes : History of Changes source code : GitHub DBeaver database connection settings : 5.20 SQL Server data types : DBSeeder Type SQL Server Type BIGINT BIGINT BLOB VARBINARY (MAX) CLOB VARCHAR (MAX) TIMESTAMP DATETIME2 VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mcr.microsoft.com/mssql/server:2022-latest DockerHub encoding : to use the UTF-8 collations that are available in SQL Server 2019 (15.x), you must select UTF-8 encoding-enabled collations (_UTF8) JDBC driver (latest) : Maven repository privileged database access : database: master user: sa restrictions : no full UTF-8 support in the given Docker images DBeaver database connection settings : 5.21 SQLite data types : DBSeeder Type SQLite Type BIGINT INTEGER BLOB BLOB CLOB CLOB TIMESTAMP DATETIME VARCHAR VARCHAR2 DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER - n/a encoding : by using the following parameter: PRAGMA encoding='UTF-8'; issue tracking : SQLite JDBC driver (latest) : Maven repository determines also the DBMS version restrictions : no Docker image necessary, hence not available no user management source code : SQLite DBeaver database connection settings : 5.22 TimescaleDB data types : DBSeeder Type AgensGraph Database Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE: see PostgreSQL CREATE SCHEMA: see PostgreSQL CREATE TABLE: see PostgreSQL CREATE USER: see PostgreSQL Docker image (latest) : pull command: docker pull timescale/timescaledb:latest DockerHub encoding : see PostgreSQL issue tracking : GitHub JDBC driver (latest) : same as PostgreSQL source code : GitHub 5.23 trino data types : DBSeeder Type trino Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER - n/a Docker image (latest) : pull command: docker pull trinodb/trino:403 DockerHub encoding : full support of UTF-8 (see here ) issue tracking : GitHub JDBC driver (latest) : Maven repository source code : GitHub DBeaver database connection settings : 5.24 VoltDB data types : DBSeeder Type VoltDB Type BIGINT BIGINT BLOB VARBINARY(1048576) CLOB VARCHAR(1048576) TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER - n/a Docker image (latest) : pull command: docker pull voltdb/voltdb-community:9.2.1 DockerHub issue tracking : Jira JDBC driver (latest) : Maven repository restrictions : no support of autoincrement, check constraints or foreign keys source code : GitHub DBeaver database connection settings : 5.25 YugabyteDB data types : DBSeeder Type YugabyteDB Database Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull yugabytedb/yugabyte:latest DockerHub encoding : see PostgreSQL issue tracking : GitHub JDBC driver (latest) : Maven repository source code : GitHub DBeaver database connection settings : 6. trino trino can integrate the following DBMS, among others: MySQL via the MySQL Connector , Oracle via the Oracle Connector , and PostgreSQL via the PostgreSQL Connector . SQL Server via the SQL Server Connector , DBSeeder makes it possible to use trino's JDBC driver and the corresponding connectors as an alternative to the JDBC drivers of the DBMS suppliers. To use the trino JDBC driver, a trino server is required. With the script db_seeder_trino_environment a trino server can be set up. Since trino does not support the Windows operating system, a suitable Docker image is created for Windows. For Linux, e.g. Ubuntu, the script can alternatively be used to perform a local installation of the trino server.","title":"Home"},{"location":"#dbseeder-relational-database-data-generator","text":"","title":"DBSeeder - Relational Database Data Generator."},{"location":"#1-introduction","text":"DBSeeder allows the flexible generation of large amounts of anonymised random dummy data for selected relational database systems (RDBMS) - useful e.g. for stress testing. The database schema underlying the data generation can be freely defined. The names of the database, the schema and the user can be freely chosen, unless the respective database management system contains restrictions. If the selected database, schema or user already exist, they are deleted with all including data. DBSeeder then creates the selected database, schema or user and generates the desired dummy data. A maximum of 2 147 483 647 rows can be generated per database table. The database schema to be used, that is, the required database tables can be user defined using a JSON file. Details can be found here: Database Schema . Currently, depending on the capabilities of the specific RDBMS, the following functionalities and data types are supported: constraints foreign (referential) key not null constraint primary key unique (alternate) key data types BIGINT - large integer BLOB - large binary object CLOB - large character Object TIMESTAMP - timestamp including date VARCHAR - variable text The database systems considered meet the following conditions: The database system is freely available in a documented docker image for testing purposes. The database system provides a well documented JDBC interface. A complete documentation of the SQL commands is available.","title":"1. Introduction"},{"location":"#11-rdbms-overview","text":"RDBMS Ticker Symbol(s) RDBMS Versions Latest JDBC AgensGraph agens v2.1.1 - v2.13.0 1.4.2-c1 Apache Derby derby, derby_emb 10.16.1.1 10.16.1.1 CockroachDB cockroach v20.2.5 - v22.1.12 see PostgreSQL CrateDB cratedb 4.1.6 - 5.1.12 2.6.0 CUBRID cubrid 10.2 - 11.2 11.1.0.0028 Exasol exasol 6.2.8-d1 - 7.1.16 7.1.16 Firebird firebird 3.0.5 - v4.0.2 4.0.8.java11 H2 Database Engine h2, h2_emb 1.4.200 - 2.1.214 2.1.214 HeavyDB heavy v5.6.1 - v6.2.0 6.1.0 HSQLDB hsqldb, hsqldb_emb 2.5.1 - 2.7.1 2.7.1 IBM Db2 Database ibmdb2 11.5.1.0 - 11.5.8.0 11.5.8.0 IBM Informix informix 14.10 FC3DE - 4.50.9 14.10.FC7W1DE MariaDB Server mariadb 10.4.13 - 10.10.2 3.1.0 Mimer SQL mimer v11.0.3c - v11.0.5a 3.42.3 MonetDB monetdb Jun2020-SP1 - Sep2022-SP1 3.2.jre8 MySQL Database mysql 8.0.20 - 8.0.31 8.0.31 Oracle Database oracle 12.1.0.2 - 21.3.0 21.8.0.0 Percona Server for MySQL percona 8.0.28-20 - 8.0.30-22 see MySQL PostgreSQL postgresql 12.3 - 15.1-alpine 42.5.1 SQL Server sqlserver 2019-CU12-ubuntu-20.04 - 11.2.2.jre18 2022-latest SQLite sqlite 3.40.0.0 TimescaleDB timescale 2.3.1-pg13 - 2.9.0-pg14 see PostgreSQL trino mysql_trino, 339 - 403 403 oracle_trino, postgresql_trino, sqlserver_trino VoltDB voltdb 9.2.1 11.4.2 YugabyteDB yugabyte 2.2.2.0-b15 - see PostgreSQL 2.17.0.0-b24","title":"1.1 RDBMS Overview"},{"location":"#12-rdbms-directory","text":"The following database systems are included in the current version of DBSeeder : AgensGraph client only version commercial, open source derived from PostgreSQL property graph model and relational model Apache Derby client and embedded version open source relational model CockroachDB client only version commercial, open source compatible with PostgreSQL JDBC relational model CrateDB client only version commercial, open source compatible with PostgreSQL relational model CUBRID client only version compatible with MySQL open source relational model Exasol client only version commercial in-memory, column-oriented, relational model Firebird client and embedded (not supported here) version open source relational model H2 Database Engine client and embedded version compatible with HSQLDB, PostgreSQL open source relational model HeavyDB client only version commercial, open source GPU and CPU version relational model HSQLDB client and embedded version open source relational model IBM Db2 Database client only version commercial relational model IBM Informix client only version commercial relational model MariaDB Server client only version open source derived from MySQL relational model Mimer SQL client only version commercial relational model MonetDB client only version open source column-oriented relational model MySQL Database client only version open source relational model Oracle Database client only version commercial relational model Percona Server for MySQL client only version commercial, open source derived from MySQL relational model PostgreSQL client only version open source relational model SQL Server client only version commercial derived from Adaptive Server Enterprise relational model SQLite commercial, open source embedded only version relational model TimescaleDB client only version commercial, open source derived from PostgreSQL relational model trino compatible with Accumulo, Cassandra, Elasticsearch, Hive, Kudu, MongoDB, MySQL, Pinot, PostgreSQL, Redis, Redshift distributed query engine open source For the RDBMS MySQL, Oracle, PostgreSQL and SQL Server the JDBC driver from trino can optionally be used instead of the original JDBC driver. The prerequisite for this is that trino is either installed locally (Linux) or is available as a Docker container (Linux and Windows). Details can be found here: trino . VoltDB client only version commercial, open source derived from H-Store, HSQLDB in-memory relational model YugabyteDB client only version commercial, open source compatible with Cassandra, PostgreSQL, Redis derived from PostgreSQL, RocksDB inspired by Cloud Spanner relational model","title":"1.2 RDBMS Directory"},{"location":"#2-data","text":"","title":"2. Data"},{"location":"#21-database-schema","text":"The underlying database schema is defined in a JSON-based parameter file and the associated program code is generated and compiled with the script scripts/run_db_seeder_generate_schema . To validate the database schema in the JSON parameter file, the JSON schema file db_seeder_schema.schema.json in the directory src/main/resources is used.","title":" 2.1 Database Schema"},{"location":"#211-structure-of-the-database-schema-definition-file","text":"The definition of a database schema consists of the object global with the global parameters and the array tables , which contains the definition of the database tables.","title":"2.1.1 Structure of the Database Schema Definition File"},{"location":"#2111-globals-global-parameters","text":"defaultNumberOfRows - default value for the number of table rows to be generated, if no value is specified in the table definition encodingISO_8859_1 - a string with Western Latin characters is inserted into generated character columns encodingUTF_8 - a string with simplified Chinese characters is inserted into generated character columns specified in the table definition nullFactor - determines the proportion of NULL values in optional columns and must be between 2 and 99 (inclusive): 2 means 50%, 4 means 25%, 10 means 10%, etc., default value is 4","title":"2.1.1.1 globals - Global Parameters"},{"location":"#2112-tables-database-table-definitions","text":"tableName - database table name numberOfRows - number of table rows to be generated columns - an array of column definitions columnName - column name dataType - data type, is one of BIGINT, BLOB, CLOB, TIMESTAMP or VARCHAR size - for data type VARCHAR the maximum size of the column value precision - currently not used notNull - is a NULL value allowed ? primaryKey - is this the primary key column ? references - an array of foreign key definitions referenceTable - name of the reference database table referenceColumn - name of the reference column defaultValueInteger - default value for integer columns defaultValueString - default value for alphanumeric columns lowerRangeInteger - lower limit for an integer column, requires also an upper limit lowerRangeString - lower limit for an alphanumeric column, requires also an upper limit upperRangeInteger - upper limit for an integer column upperRangeString - upper limit for an alphanumeric column validValuesInteger - valid values for an integer column validValuesString - valid values for an alphanumeric column tableConstraints - an array of table constraint definitions constraintType - constraint type, is one of FOREIGN, PRIMARY or UNIQUE columns - an arry with the names of the affected columns referenceTable - name of the reference database table, only for foreign keys referenceColumns - an arry with the names of the affected reference columns, only for foreign keys Only either a range restriction ( lowerRange... , upperRange... ) or a value restriction ( validValues... ) may be specified for each column.","title":"2.1.1.2 tables - Database Table Definitions"},{"location":"#212-mapping-of-data-types-in-the-jdbc-driver","text":"Data Type JDBC Method BIGINT setLong BLOB setBytes CLOB setString TIMESTAMP setTimestamp VARCHAR setNString (Firebird, MariaDB, MS SQL SERVER and Oracle) setString (else)","title":"2.1.2 Mapping of Data Types in the JDBC Driver"},{"location":"#213-example-file-db_seeder_schemacompany_99json-in-the-directory-resourcesjson","text":"This file contains the definition of a simple database schema consisting of the database tables CITY, COMPANY, COUNTRY, COUNTRY_STATE and TIMEZONE. The abbreviations in the following illustration (created with Toad Data Modeler) mean: (AK1) - alternate key (unique key) FK - foreign key NN - not null PK - primary key","title":"2.1.3 Example File db_seeder_schema.company_9...9.json in the Directory resources/json"},{"location":"#22-construction-of-the-dummy-data-content","text":"The proportion of NULL values in optional columns is defined by the global parameter nullFactor . All methods for generating column contents can be overwritten if necessary.","title":"2.2 Construction of the Dummy Data Content"},{"location":"#221-bigint","text":"Java method: getContentBigint If the column parameter validValuesInteger is defined in the database schema, a random value is taken from it. If the column parameters lowerRangeInteger and upperRangeInteger are defined in the database schema, a random value is taken from this interval. Otherwise the counter for the current row (row number) is used.","title":"2.2.1 BIGINT"},{"location":"#222-blob","text":"Java method: getContentBlob The content of the file blob.png from the resource directory ( src/main/resources ) is loaded into these columns.This file contains the company logo of Konnexions GmBH.","title":"2.2.2 BLOB"},{"location":"#223-clob","text":"Java method: getContentClob The content of the file clob.md from the resource directory ( src/main/resources ) is loaded into these columns. This file contains the text of the Konnexions Public License (KX-PL).","title":"2.2.3 CLOB"},{"location":"#224-timestamp","text":"Java method: getContentTimestamp A randomly generated timestamp is assigned to all columns that can contain temporal data.","title":"2.2.4 TIMESTAMP"},{"location":"#225-varchar","text":"Java method: getContentVarchar If the column parameter validValuesString is defined in the database schema, a random value is taken from it. If the column parameters lowerRangeString and upperRangeString are defined in the database schema, a random value is taken from this interval. Otherwise content of the column is constructed depending on the row number and the encoding flags as follows: ASCII (all rows where the index modulo 3 is 0): column name in capital letters underscore _ current row number left-justified ISO 8859 1 (all rows where the index modulo 3 is 1) : column name in capital letters underscore _ a string containing specific Western European characters with accent (e.g. French, Portuguese or Spanish) underscore _ current row number left-justified the ISO 8859 1 version can be prevented by choosing encodingISO_8859_1 false in the database schema definition UTF-8 (all rows where the index modulo 3 is 2): column name in capital letters underscore _ a string containing simplified Chinese characters underscore _ current row number left-justified the UTF-8 version can be prevented by choosing encodingUTF_8 false in the database schema definition If the resulting value exceeds the permissible column size, the value is shortened accordingly from the left","title":"2.2.5 VARCHAR"},{"location":"#226-examples","text":"","title":"2.2.6 Examples"},{"location":"#1-table-city","text":"","title":"1. Table CITY"},{"location":"#2-table-country","text":"","title":"2. Table COUNTRY"},{"location":"#3-table-timezone","text":"","title":"3. Table TIMEZONE"},{"location":"#3-installation","text":"The easiest way is to download a current release of DBSeeder from the GitHub repository. You can find the necessary link here . To download the repository Git is needed and for compilation the Gradle Build Tool and the open-source JDK are needed. For changes to the DBSeeder repository it is best to use an editor (e.g. Vim ) or an IDE (e.g. Eclipse IDE ). For using the Docker Image based databases in operational mode, Docker Desktop must also be installed. For the respective software versions, please consult the document release notes .","title":"3. Installation"},{"location":"#4-operating-instructions","text":"","title":"4. Operating Instructions"},{"location":"#41-script-run_db_seeder","text":"Using the DBSeeder development and operational Docker image from Docker Hub (see here ) eliminates the need to install the runtime environment. With the script run_db_seeder the complete functionality of the DBSeeder application can be used: Creating a suitable database Generation of any number of dummy data. All scripts are available in a Windows version ( cmd / .bat ) as well as in a Unix version ( bash / .sh ). To run the scripts, apart from the prerequisites as release notes ( ReleaseNotes.md ), only the libraries in the lib directory and the corresponding script of run_db_seeder are required. The creation of the databases also requires a working access to Docker Hub . All control parameters used in DBSeeder (see section 4.3) can be adapted in the scripts to specific needs. The run_db_seeder script is controlled by the following script parameters:: DB_SEEDER_DBMS : the ticker symbol of the desired database management system (default value sqlite ) or complete for all implemented RDBMS. DB_SEEDER_SETUP_DBMS : should an empty database be created: yes : a new database is created based on a suitable Docker image otherwise: no database is created DB_SEEDER_NO_CREATE_RUNS : Number of dummy data generation runs: 1: one run 2: two runs otherwise: no run For the run variants complete , complete_client , complete_emb and complete_trino , statistics files with the following data name structure are created in the file directory resources/statistics by default: db_seeder_<bash|cmd>_<run variant>_unknown_<DBSeeder release>_<vmware|win10|wsl2>.<csv|tsv> An overview of the structure of the scripts used can be taken from the following diagram:","title":"4.1 Script run_db_seeder"},{"location":"#42-operation-possibilities","text":"DBSeeder is tested under Ubuntu and Microsoft Windows . In addition, tests are always performed in Windows with Ubuntu under the Windows Subsystem for Linux (WSL) . Besides one of the two operating systems, these are the minimum requirements for running DBSeeder : Docker Desktop Community Eclipse IDE Gradle Build Tool Java Development Kit Details on the required software versions can be found in the release notes .","title":"4.2 Operation Possibilities"},{"location":"#special-features-for-the-operation-with-ubuntu","text":"A suitable image is available on Docker Hub for development and operation, see here . In the directory scripts/3.0.6 are the two scripts run_install_4_vm_wsl2_1.sh and run_install_4_vm_wsl2_1.sh with which an Ubuntu environment can be prepared for development and operation. If the Windows Subsystem for Linux (WSL) is to be used, then the WSL INTEGRATION for Ubuntu must be activated in Docker","title":"Special Features for the Operation with Ubuntu"},{"location":"#43-control-parameters","text":"","title":"4.3 Control Parameters"},{"location":"#431-supported-parameters","text":"The flow control parameters for DBSeeder are stored in the properties file src/main/resources/db_seeder.properties and can all be overridden by the environment variables defined in the scripts. The following control parameters are currently supported: db_seeder.batch.size=0 db_seeder.character.set.server= db_seeder.collation.server= db_seeder.connection.host= db_seeder.connection.host.trino= db_seeder.connection.port=0 db_seeder.connection.port.trino=0 db_seeder.connection.prefix= db_seeder.connection.service= db_seeder.connection.suffix= db_seeder.database.sys= db_seeder.database= db_seeder.drop.constraints= db_seeder.file.configuration.name=yes db_seeder.file.improvement.header=DBMS;Type;ms;Constraints;Improvement db_seeder.file.improvement.name= db_seeder.file.json.name=resources/json/db_seeder_schema.company_5400.json db_seeder.file.statistics.delimiter=\\t db_seeder.file.statistics.header=ticker symbol;DBMS;db type;total ms;start time;end time;host name;no. cores;operating system;total DDL ms;drop constr. ms;add constr. ms;total DML ms;constraints db_seeder.file.statistics.name=resources/statistics/db_seeder_statistics.tsv db_seeder.file.summary.name= db_seeder.file.summary.source=resources/statistics db_seeder.password.sys= db_seeder.password= db_seeder.schema= db_seeder.user.sys= db_seeder.user=","title":"4.3.1 Supported Parameters"},{"location":"#432-explanation-and-cross-reference","text":"Property incl. Default Value [db.seeder.] Environment Variable [DB_SEEDER_] Used By Description batch.size=<9...9> BATCH_SIZE all RDBMS except number of insert operations for the bulk operation, default value 0 (a single bulk operation for each database table) character.set.server= CHARACTER_SET_SERVER mariadb default server character set collation.server= COLLATION_SERVER mariadb default server collation connection.host= CONNECTION_HOST all client RDBMS host name or ip address of the database server connection.host_trino= CONNECTION_HOST_TRINO trino host name or ip address of the trino connection.port=<9...9> CONNECTION_PORT all client RDBMS port number of the database server connection.port_trino=<9...9> CONNECTION_PORT_TRINO trino port number of the trino connection.prefix= CONNECTION_PREFIX all RDBMS prefix of the database connection string connection.service= CONNECTION_SERVICE oracle service name of the database connection string connection.suffix= CONNECTION_SUFFIX firebird, hsqldb, mysql, percona, voltdb suffix of the database connection string database.sys= DATABASE_SYS agens, cockroach, heavy, informix, mariadb, mimer, monetdb, mysql, percona, privileged database name postgresql, sqlserver, timescale, yugabyte database= DATABASE all RDBMS except cratedb, exasol, monetdb, oracle, voltdb database name drop.constraints= DROP_CONSTRAINTS all RDBMS except cockroach, cratedb, h2, heavy, sqlite, trino drop all contraints before the DML operations and recreate them afterwards file.configuration.name= FILE_CONFIGURATION_NAME n/a directory and file name of the DBSeeder configuration file file.improvement.header= FILE_IMPROVEMENT_HEADER all RDBMS header line of the improvement file created in run_db_seeder_compute_improvement file.improvement.name= FILE_IMPROVEMENT_NAME all RDBMS directory and file name of the DBSeeder improvement file created in run_db_seeder_compute_improvement file.json.name= FILE_JSON_NAME scripts/run_db_seeder_generate_schema directory and file name of the JSON file containing the database schema file.statistics.delimiter= FILE_STATISTICS_DELIMITER all RDBMS separator of the statistics file created in run_db_seeder file.statistics.header= FILE_STATISTICS_HEADER all RDBMS header line of the statistics file created in run_db_seeder file.statistics.name= FILE_STATISTICS_NAME all RDBMS file name of the statistics file created in run_db_seeder file.summary.name= FILE_SUMMARY_NAME all RDBMS file name of the summary statistics file created in run_db_seeder_create_summary file.summary.source= FILE_SUMMARY_SOURCE all RDBMS directory name(s) (separated by semicolon) of the source directories containing statistics files password.sys= PASSWORD_SYS agens, exasol, firebird, heavy, ibmdb2, informix, mariadb, mimer, monetdb, mysql, password of the privileged user oracle, percona, postgresql, sqlserver, timescale password= PASSWORD all RDBMS except cockroach, derby, ibmdb2, informix password of the normal user schema=kxn_schema SCHEMA agens, derby, exasol, h2, hsqldb, ibmdb2, monetdb, postgresql, sqlserver, schema name timescale, yugabyte user.sys= USER_SYS all RDBMS except derby, voltdb name of the privileged user user=kxn_user USER all RDBMS except derby, ibmdb2, informix name of the normal user","title":"4.3.2 Explanation and Cross-reference"},{"location":"#44-statistics","text":"Each new release is completed with the creation of 7 statistics files in the file directory resources/statistics . The data contained in these files show the DDL and DML performance of the individual databases under identical conditions: Operating systems: Ubuntu with VMware Workstation Player, Ubuntu with WSL (Windoiws Subsystem for Linux) on Windows and Windows. ..._vmware.tsv : Ubuntu with VMware Workstation Player on Windows ...._win10.tsv : Windows 10 ....._wsl2.tsv : Ubuntu LTS with Windows Subsystem for Linux 2 on Windows DDL: Creation of the database schema consisting of the 5 relational tables CITY, COMPANY, COUNTRY, COUNTRY_STATE and TIMEZONE (see JSON file: resources/json/db_seeder_schema.company_5400.json ). DML: Insert records into these database tables - CITY 1800, COMPANY 5400, COUNTRY 200, COUNTRY_STATE 600 and TIMEZONE 11. If possible, two runs are made for each database system: one run with constraints enabled and one run with constraints disabled - see column constraints : active : constraints are enabled active - no choice : constraints are enabled and disabling is not possible inactive : constraints are disabled The creation of these statistics files is managed by the following control parameters ( see here ): db_seeder.file.improvement.header=DBMS;Type;ms;Constraints;Improvement db_seeder.file.improvement.name= db_seeder.file.statistics.delimiter=\\t db_seeder.file.statistics.header=ticker symbol;DBMS;db type;total ms;start time;end time;host name;no. cores;operating system;total DDL ms;drop constr. ms;add constr. ms;total DML ms;constraints db_seeder.file.statistics.name=resources/statistics/db_seeder_statistics.tsv db_seeder.file.summary.name= db_seeder.file.summary.source=resources/statistics","title":"4.4 Statistics"},{"location":"#441-detailed-statistical-data","text":"File name syntax : db_seeder_<bash|cmd>_complete_<company|syntax>_<DBSeeder version>_<vmware|wsl2|win10>.<csv|tsv> Explanation for the columns : ticker symbol - internal abbreviation used for the database DBMS - official DBMS name db type - client version, embedded version or via trino total ms - total time of DDL and DML operations in milliseconds start time - date and time when the database operations were started end time - date and time when the database operations were completed host name - name of the computer connected to a computer network no. cores - number of CPU cores used operating system total DDL ms - total time of DDL operations in milliseconds drop constr. ms - total time to drop all constraints add constr. ms - total time to add the previously dropped constraints total DML ms - total time of DML operations in milliseconds constraints - DML operations with enabled (active) or disabled (inactive) constraints (foreign, primary and unique key)","title":"4.4.1 Detailed statistical data"},{"location":"#442-performance-data-regarding-constraints","text":"File name syntax : db_seeder_<bash|cmd>_improvement_<company|syntax>_<DBSeeder version>_<vmware|wsl2|win10>.<csv|tsv> Explanation for the columns : DBMS - official DBMS name Type - client version, embedded version or via trino ms - total time of DDL and DML operations in milliseconds Constraints - DML operations with enabled (active) or disabled (inactive) constraints (foreign, primary and unique key) Improvment - improvement of total time if constraints are inactive","title":"4.4.2 Performance data regarding constraints"},{"location":"#443-historical-statistical-data","text":"File name syntax : db_seeder_summary_<first DBSeeder version>-<current DBSeeder version>.<csv|tsv> Explanation for the columns : ticker symbol - internal abbreviation used for the database DBMS - official DBMS name version - DBSeeder version creator - shell environment: bash or cmd db type - client version, embedded version or via trino constraints - DML operations with enabled ( active and active - no choice ) or disabled ( inactive ) constraints (foreign, primary and unique key) schema - identification term for the scheme definition used: company or syntax total ms - total time of DDL and DML operations in milliseconds start time - date and time when the database operations were started end time - date and time when the database operations were completed host name - name of the computer connected to a computer network no. cores - number of CPU cores used operating system file name - name of the file with the source data total DDL ms - total time of DDL operations in milliseconds drop constr. ms - total time to drop all constraints add constr. ms - total time to add the previously dropped constraints total DML ms - total time of DML operations in milliseconds","title":"4.4.3 Historical statistical data"},{"location":"#5-rdbms-specific-technical-details","text":"DBeaver is a great tool to analyze the database content. In the file directory resources/dbeaver you will also find a file exported from DBeaver with the connection parameters currently used in DBSeeder.","title":"5. RDBMS Specific Technical Details"},{"location":"#51-agensgraph","text":"data types : DBSeeder Type AgensGraph Database Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE: see PostgreSQL CREATE SCHEMA: see PostgreSQL CREATE TABLE: see PostgreSQL CREATE USER: see PostgreSQL Docker image (latest) : pull command: docker pull bitnine/agensgraph:v2.13.0 DockerHub encoding : see PostgreSQL issue tracking : GitHub JDBC driver (latest) : version 1.4.2-c1 Maven repository source code : GitHub","title":"5.1 AgensGraph"},{"location":"#52-apache-derby","text":"data types : DBSeeder Type Apache Derby Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER - n/a Docker image (latest - only client version) : pull command: docker pull konnexionsgmbh/apache_derby:10.16.1.1 DockerHub encoding : by using the following JVM parameter: -Dderby.ui.codeset=UTF8 issue tracking : Jira JDBC driver (latest) : client version: Maven repository embedded version: Maven repository source code : Apache Derby DBeaver database connection settings : -- client version:","title":"5.2 Apache Derby"},{"location":"#53-cockroachdb","text":"data types : DBSeeder Type CockroachDB Type BIGINT INT BLOB BYTES CLOB STRING TIMESTAMP TIMESTAMP VARCHAR STRING DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull cockroachdb/cockroach:latest DockerHub encoding : by default utf8 encoding issue tracking : GitHub JDBC driver (latest) : same as PostgreSQL privileged database access : user root source code : GitHub DBeaver database connection settings :","title":"5.3 CockroachDB"},{"location":"#54-cratedb","text":"data types : DBSeeder Type CrateDB Type BIGINT BIGINT BLOB OBJECT CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR TEXT DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: `docker pull crate:latest DockerHub encoding : by default utf8 encoding issue tracking : GitHub JDBC driver (latest) : JFrog Bintray repository privileged database access : user crate restrictions : no constraints (e.g. foreign keys or unique keys) no transaction concept no triggers only a very proprietary BLOB implementation source code : GitHub DBeaver database connection settings :","title":"5.4 CrateDB"},{"location":"#55-cubrid","text":"data types : DBSeeder Type CUBRID Type BIGINT INT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull cubrid/cubrid:11.0 DockerHub encoding : by specifying after the database name when database is created: kxn_db de_DE.utf8 issue tracking : Jira JDBC driver (latest) : Maven repository privileged database access : users DBA and PUBLIC restrictions : no full UTF-8 support source code : GitHub DBeaver database connection settings :","title":"5.5 CUBRID"},{"location":"#56-exasol","text":"data types : DBSeeder Type Exasol Type BIGINT BIGINT BLOB VARCHAR(2000000) CLOB VARCHAR(2000000) TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull exasol/docker-db:latest DockerHub JDBC driver (latest) : Maven repository privileged database access : user sys password exasol restrictions : no unique key constraints DBeaver database connection settings :","title":"5.6 Exasol"},{"location":"#57-firebird","text":"data types : DBSeeder Type Firebird Type BIGINT INTEGER BLOB BLOB CLOB BLOB SUB_TYPE 1 TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull jacobalberty/firebird:v4.0.2 DockerHub encoding : by using the following JDBC URL parameter: encoding=UTF8 issue tracking : GitHub JDBC driver (latest) : Maven repository privileged database access : user SYSDBA source code : GitHub DBeaver database connection settings :","title":"5.7 Firebird"},{"location":"#58-h2-database-engine","text":"data types : DBSeeder Type H2 Database Engine Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull konnexionsgmbh/h2_database_engine:2.1.214 DockerHub encoding : H2 internally uses Unicode, and supports all character encoding systems and character sets supported by the virtual machine you use. issue tracking : GitHub JDBC driver (latest) : Maven repository privileged database access : user sa source code : GitHub DBeaver database connection settings : -- client version:","title":"5.8 H2 Database Engine"},{"location":"#59-heavydb","text":"data types : DBSeeder Type HeavyDB Type BIGINT BIGINT BLOB TEXT ENCODING NONE CLOB TEXT ENCODING NONE TIMESTAMP TIMESTAMP(0) VARCHAR TEXT ENCODING NONE DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull omnisci/core-os-cpu DockerHub encoding : no special configuration should be needed issue tracking : GitHub JDBC driver (latest) : Maven repository privileged database access : database: omnisci user: admin restrictions : column and table names case sensitive max. column length 32767 bytes no binary columns no constraints, e.g. unique keys no foreign / referential keys no primary key no triggerss source code : GitHub DBeaver database connection settings :","title":"5.9 HeavyDB"},{"location":"#510-hsqldb","text":"data types : DBSeeder Type HSQLDB Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull konnexionsgmbh/hypersql_database:latest DockerHub encoding : by using the following system property sqlfile.charset=UTF-8 . issue tracking : SourceForge JDBC driver (latest) : Maven repository privileged database access : user SA source code : SourceForge DBeaver database connection settings : -- client version:","title":"5.10 HSQLDB"},{"location":"#511-ibm-db2-database","text":"data types : DBSeeder Type IBM Db2 Database Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull ibmcom/db2:11.5.8.0 DockerHub encoding : by using the CCSID clause in the CREATE statements for any of the following objects: Database Table space Table procedure or function JDBC driver (latest) : Maven repository privileged database access : user db2inst1 restrictions : the IBM Db2 DBMS only accepts operating system accounts as database users DBeaver database connection settings :","title":"5.11 IBM Db2 Database"},{"location":"#512-ibm-informix","text":"data types : DBSeeder Type IBM Informix Database Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP DATETIME YEAR TO FRACTION VARCHAR VARCHAR (1-254) / LVARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull ibmcom/informix-developer-database:14.10.FC7W1DE DockerHub encoding : code-set conversion value is extracted from the DB_LOCALE value specified at the time the connection is made JDBC driver (latest) : Maven repository privileged database access : user informix password in4mix database / schema sysmaster INFORMIXSERVER informix restrictions : the IBM Informix DBMS only accepts operating system accounts or users mapped to operating system accounts as database users no named constraints in ALTER TABLE ADD CONSTRAINT DBeaver database connection settings :","title":"5.12 IBM Informix"},{"location":"#513-mariadb-server","text":"data types : DBSeeder Type MariaDB Type BIGINT BIGINT BLOB LONGBLOB CLOB LONGTEXT TIMESTAMP DATETIME VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mariadb:latest DockerHub encoding : server level: SET character_set_server = 'latin2'; database level: CHARACTER SET = 'keybcs2' table level: CHARACTER SET 'utf8' column level: CHARACTER SET 'greek' issue tracking : Jira JDBC driver (latest) : Maven repository privileged database access : user: mysql password; root source code : GitHub DBeaver database connection settings :","title":"5.13 MariaDB Server"},{"location":"#514-mimer-sql","text":"data types : DBSeeder Type MimerSQL Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR NVARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mimersql/mimersql_v11.0.5a DockerHub encoding : NCHAR, NVARCHAR JDBC driver (latest) : Mimer Website privileged database access : database; mimerdb user: SYSADM DBeaver database connection settings :","title":"5.14 Mimer SQL"},{"location":"#515-monetdb","text":"data types : DBSeeder Type MonetDB Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull monetdb/monetdb:Sep2022-SP1 DockerHub encoding : no special configuration should be needed issue tracking : GitHub JDBC driver (latest) : MonetDB Java Download Area privileged database access : database: demo user: monetdb password: monetdb source code : GitHub DBeaver database connection settings :","title":"5.15 MonetDB"},{"location":"#516-mysql-database","text":"data types : DBSeeder Type MySQL Database Type BIGINT BIGINT BLOB LONGBLOB CLOB LONGTEXT TIMESTAMP DATETIME VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mysql:8.0.31 DockerHub encoding : for applications that store data using the default MySQL character set and collation (utf8mb4, utf8mb4_0900_ai_ci), no special configuration should be needed JDBC driver (latest) : Maven repository privileged database access : database: sys user: root source code : GitHub DBeaver database connection settings :","title":"5.16 MySQL Database"},{"location":"#517-oracle-database","text":"data types : DBSeeder Type Oracle Database Type BIGINT NUMBER BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR2 DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER Docker image : DockerHub encoding : since Oracle Database 12c Release 2 the default database character set used is the Unicode character set AL32UTF8 JDBC driver (latest) : Maven repository privileged database access : database: orclpdb1 user: SYS AS SYSDBA DBeaver database connection settings :","title":"5.17 Oracle Database"},{"location":"#518-percona-server-for-mysql","text":"data types : DBSeeder Type Percona Sercver Type BIGINT BIGINT BLOB LONGBLOB CLOB LONGTEXT TIMESTAMP DATETIME VARCHAR VARCHAR DDL syntax : CREATE DATABASE: see MySQL Database CREATE SCHEMA - n/a CREATE TABLE: see MySQL Database CREATE USER: see MySQL Database Docker image (latest) : pull command: docker pull percona/percona-server:latest DockerHub encoding : for applications that store data using the default MySQL character set and collation (utf8mb4, utf8mb4_0900_ai_ci), no special configuration should be needed issue tracking : Jira JDBC driver (latest) : same as MySQL privileged database access : database: sys user: root source code : GitHub DBeaver database connection settings :","title":"5.18 Percona Server for MySQL"},{"location":"#519-postgresql","text":"data types : DBSeeder Type PostgreSQL Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull postgres:15.1-alpine DockerHub encoding : when creating the database: CREATE DATABASE testdb WITH ENCODING 'EUC_KR' ... issue tracking : PostgreSQL JDBC driver (latest) : Maven repository documentation : The PostgreSQL JDBC Interface release notes : History of Changes source code : GitHub DBeaver database connection settings :","title":"5.19 PostgreSQL"},{"location":"#520-sql-server","text":"data types : DBSeeder Type SQL Server Type BIGINT BIGINT BLOB VARBINARY (MAX) CLOB VARCHAR (MAX) TIMESTAMP DATETIME2 VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull mcr.microsoft.com/mssql/server:2022-latest DockerHub encoding : to use the UTF-8 collations that are available in SQL Server 2019 (15.x), you must select UTF-8 encoding-enabled collations (_UTF8) JDBC driver (latest) : Maven repository privileged database access : database: master user: sa restrictions : no full UTF-8 support in the given Docker images DBeaver database connection settings :","title":"5.20 SQL Server"},{"location":"#521-sqlite","text":"data types : DBSeeder Type SQLite Type BIGINT INTEGER BLOB BLOB CLOB CLOB TIMESTAMP DATETIME VARCHAR VARCHAR2 DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER - n/a encoding : by using the following parameter: PRAGMA encoding='UTF-8'; issue tracking : SQLite JDBC driver (latest) : Maven repository determines also the DBMS version restrictions : no Docker image necessary, hence not available no user management source code : SQLite DBeaver database connection settings :","title":"5.21 SQLite"},{"location":"#522-timescaledb","text":"data types : DBSeeder Type AgensGraph Database Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE: see PostgreSQL CREATE SCHEMA: see PostgreSQL CREATE TABLE: see PostgreSQL CREATE USER: see PostgreSQL Docker image (latest) : pull command: docker pull timescale/timescaledb:latest DockerHub encoding : see PostgreSQL issue tracking : GitHub JDBC driver (latest) : same as PostgreSQL source code : GitHub","title":"5.22 TimescaleDB"},{"location":"#523-trino","text":"data types : DBSeeder Type trino Type BIGINT BIGINT BLOB BLOB CLOB CLOB TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA CREATE TABLE CREATE USER - n/a Docker image (latest) : pull command: docker pull trinodb/trino:403 DockerHub encoding : full support of UTF-8 (see here ) issue tracking : GitHub JDBC driver (latest) : Maven repository source code : GitHub DBeaver database connection settings :","title":"5.23 trino"},{"location":"#524-voltdb","text":"data types : DBSeeder Type VoltDB Type BIGINT BIGINT BLOB VARBINARY(1048576) CLOB VARCHAR(1048576) TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE - n/a CREATE SCHEMA - n/a CREATE TABLE CREATE USER - n/a Docker image (latest) : pull command: docker pull voltdb/voltdb-community:9.2.1 DockerHub issue tracking : Jira JDBC driver (latest) : Maven repository restrictions : no support of autoincrement, check constraints or foreign keys source code : GitHub DBeaver database connection settings :","title":"5.24 VoltDB"},{"location":"#525-yugabytedb","text":"data types : DBSeeder Type YugabyteDB Database Type BIGINT BIGINT BLOB BYTEA CLOB TEXT TIMESTAMP TIMESTAMP VARCHAR VARCHAR DDL syntax : CREATE DATABASE CREATE SCHEMA CREATE TABLE CREATE USER Docker image (latest) : pull command: docker pull yugabytedb/yugabyte:latest DockerHub encoding : see PostgreSQL issue tracking : GitHub JDBC driver (latest) : Maven repository source code : GitHub DBeaver database connection settings :","title":"5.25 YugabyteDB"},{"location":"#6-trino","text":"trino can integrate the following DBMS, among others: MySQL via the MySQL Connector , Oracle via the Oracle Connector , and PostgreSQL via the PostgreSQL Connector . SQL Server via the SQL Server Connector , DBSeeder makes it possible to use trino's JDBC driver and the corresponding connectors as an alternative to the JDBC drivers of the DBMS suppliers. To use the trino JDBC driver, a trino server is required. With the script db_seeder_trino_environment a trino server can be set up. Since trino does not support the Windows operating system, a suitable Docker image is created for Windows. For Linux, e.g. Ubuntu, the script can alternatively be used to perform a local installation of the trino server.","title":" 6. trino"},{"location":"code_of_conduct/","text":"DBSeeder - Code of Conduct 1. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. 2. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting 3. Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. 4. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. 5. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at info@konnexions.ch. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. 6. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4. For answers to common questions about this code of conduct, see here .","title":"Code of Conduct"},{"location":"code_of_conduct/#dbseeder-code-of-conduct","text":"","title":"DBSeeder - Code of Conduct"},{"location":"code_of_conduct/#1-our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"1. Our Pledge"},{"location":"code_of_conduct/#2-our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"2. Our Standards"},{"location":"code_of_conduct/#3-our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"3. Our Responsibilities"},{"location":"code_of_conduct/#4-scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"4. Scope"},{"location":"code_of_conduct/#5-enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at info@konnexions.ch. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"5. Enforcement"},{"location":"code_of_conduct/#6-attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4. For answers to common questions about this code of conduct, see here .","title":"6. Attribution"},{"location":"contributing/","text":"DBSeeder - Contributing Guide 1. License In case of software changes we strongly recommend you to respect the license terms. 2. Process In case of software changes we strongly recommend you to respect the license terms. Fork it Create your feature branch ( git checkout -b my-new-feature ) Commit your changes ( git commit -am 'Add some feature' ) Push to the branch ( git push origin my-new-feature ) Create a new Pull Request Action points to be considered when adding a new database: lib/<database_driver>.jar resources/docker/trino/catalog/db_seeder_<ticker_symbol>.properties scripts run_db_seeder_complete[client|emb|trino].[bat|sh] run_db_seeder_generate_schema.[bat|sh] run_db_seeder_setup_<ticker_symbol>.bat run_db_seeder_setup_dbms.[bat|sh] run_db_seeder_setup_files.[bat|sh] run_db_seeder_single.[bat|sh] run_db_seeder_trino_environment.[bat|sh] src/main/java ch/konnexions/db_seeder/AbstractDatabaseSeeder.java ch/konnexions/db_seeder/DatabaseSeeder.java ch/konnexions/db_seeder/TrinoEnvironment.java ch/konnexions/db_seeder/generator/GenerateSchema.java ch/konnexions/db_seeder/jdbc/<ticker_symbol>/<Database>Seeder.java ch/konnexions/db_seeder/jdbc/AbstractJdbcSeeder.java","title":"Contributing Guide"},{"location":"contributing/#dbseeder-contributing-guide","text":"","title":"DBSeeder - Contributing Guide"},{"location":"contributing/#1-license","text":"In case of software changes we strongly recommend you to respect the license terms.","title":"1. License"},{"location":"contributing/#2-process","text":"In case of software changes we strongly recommend you to respect the license terms. Fork it Create your feature branch ( git checkout -b my-new-feature ) Commit your changes ( git commit -am 'Add some feature' ) Push to the branch ( git push origin my-new-feature ) Create a new Pull Request Action points to be considered when adding a new database: lib/<database_driver>.jar resources/docker/trino/catalog/db_seeder_<ticker_symbol>.properties scripts run_db_seeder_complete[client|emb|trino].[bat|sh] run_db_seeder_generate_schema.[bat|sh] run_db_seeder_setup_<ticker_symbol>.bat run_db_seeder_setup_dbms.[bat|sh] run_db_seeder_setup_files.[bat|sh] run_db_seeder_single.[bat|sh] run_db_seeder_trino_environment.[bat|sh] src/main/java ch/konnexions/db_seeder/AbstractDatabaseSeeder.java ch/konnexions/db_seeder/DatabaseSeeder.java ch/konnexions/db_seeder/TrinoEnvironment.java ch/konnexions/db_seeder/generator/GenerateSchema.java ch/konnexions/db_seeder/jdbc/<ticker_symbol>/<Database>Seeder.java ch/konnexions/db_seeder/jdbc/AbstractJdbcSeeder.java","title":"2. Process"},{"location":"license/","text":"DBSeeder - License Konnexions Public License (KX-PL) Version 2020.05, May 2020 pdf Version This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions. The terms \"reproduce\", \"reproduction\", \"derivative works\", and \"distribution\" have the same meaning here as under U.S. copyright law. A \"contribution\" is the original software, or any additions or changes to the software. A \"contributor\" is any person that distributes its contribution under this license. \"Licensed patents\" are a contributor's patent claims that read directly on its contribution. Grant of Rights (a) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non- exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (b) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non- exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (a) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (b) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.0 (c) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (d) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (e) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. (f) Source code usage under this License is limited to review, compilation and contributions. Contributions to Konnexions software products under this License may only be made in consultation with Konnexions GmbH and through the appropriate Konnexions software repositories.","title":"License"},{"location":"license/#dbseeder-license","text":"Konnexions Public License (KX-PL) Version 2020.05, May 2020 pdf Version This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions. The terms \"reproduce\", \"reproduction\", \"derivative works\", and \"distribution\" have the same meaning here as under U.S. copyright law. A \"contribution\" is the original software, or any additions or changes to the software. A \"contributor\" is any person that distributes its contribution under this license. \"Licensed patents\" are a contributor's patent claims that read directly on its contribution. Grant of Rights (a) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non- exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (b) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non- exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (a) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (b) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.0 (c) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (d) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (e) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. (f) Source code usage under this License is limited to review, compilation and contributions. Contributions to Konnexions software products under this License may only be made in consultation with Konnexions GmbH and through the appropriate Konnexions software repositories.","title":"DBSeeder - License"},{"location":"release-history/","text":"DBSeeder - Release History Version 3.0.6 Release Date: 01.03.2022 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16 or 17, (e.g. from here ) optional: Eclipse IDE: 2021.12 (e.g. from Eclipse Download Page ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-12\\eclipse New Features Travis CI replaced by GitHub Actions Use of GitHub pages for user documentation Modified Features CockroachDB: DBMS v21.2.6 CrateDB: DBMS 4.7.0 Exasol: DBMS 7.1.6 / JDBC 7.1.4 Firebird: DBMS v4.0.1 / JDBC 4.0.4.java11 H2 Database Engine: DBMS 2.1.210 / JDBC 2.1.210 IBM Db2 Database: JDBC 11.5.7.0 IBM Informix: DBMS 14.10.FC7W1DE / JDBC 4.50.7 MariaDB Server: JDBC 3.0.3 Mimer SQL: JDBC 3.42.3 MonetDB: DBMS Jan2022-SP1 / JDBC 3.2.jre8 MySQL Database: DBMS 8.0.28 / JDBC 8.0.28 OmniSciDB: DBMS v5.10.2 / JDBC 5.10.0 Oracle Database: JDBC 21.4.0.0.1 Percona Server for MySQL: DBMS 8.0.26-17 PostgreSQL: DBMS 14.2 / JDBC 42.3.3 SQL Server: DBMS 2019-CU15-ubuntu-20.04 TimescaleDB: DBMS 2.6.0-pg14 trino: DBMS 371 / JDBC 371 YugabyteDB: DBMS 2.12.1.0-b41 Version 3.0.5 Release Date: 14.12.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.12 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 17, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-12\\eclipse Modified Features CockroachDB: DBMS v21.2.2 CrateDB: DBMS 4.6.5 CUBRID: JDBC 11.0.5.0299 Exasol: DBMS 7.1.3 / JDBC 7.1.3 H2 database Engine: DBMS 2.0.202 / JDBC 2.0.202 HSQLDB: DBMS 2.6.1 IBM Db2 Database: DBMS 11.5.7.0 IBM Informix: JDBC 4.50.7 MariaDB Server: DBMS 10.7.1-focal OmniSciDB: DBMS 5.9.0 / JDBC 42.3.1 PostgreSQL: DBMS 14.1 SQL Server: DBMS 2019-CU14-ubuntu-20.04 / JDBC 9.4.1.jre16 TimescaleDB: DBMS 2.5.1-pg14 trino: DBMS 365 / JDBC 365 YugabyteDB: DBMS 2.11.0.1-b1 Version 3.0.4 Release Date: 29.10.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.09 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 17, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-09\\eclipse Modified Features AgensGraph: DBMS v2.5.0 CockroachDB: DBMS v21.1.11 CrateDB: DBMS 4.6.4 CUBRID: JDBC 11.0.3.0293 Exasol: DBMS 7.1.2 / JDBC 7.1.2 Firebird: JDBC 4.0.4.java11 HSQLDB: JDBC 2.6.1 IBM Db2 Database: DBMS 11.5.6.0a IBM Informix: DBMS 14.10.FC6DE / JDBC 4.50.6 MonetDB: DBMS Jul2021-SP1 MySQL Database: DBMS 8.0.27 / JDBC 8.0.27 OmniSciDB: DBMS 5.8.0 Percona Server for MySQL: DBMS 8.0.26-16 PostgreSQL: DBMS 14.0 / JDBC 42.3.0 SQL Server: DBMS 2019-CU13-ubuntu-20.04 TimescaleDB: DBMS 2.5.0-pg14 trino: DBMS 363 / JDBC 363 YugabyteDB: JDBC 42.3.0 Version 3.0.3 Release Date: 12.09.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse New Features Automatic creation of statistics files regarding improvement with and without constraints and total overview of all releases Modified Features Updating and expanding the documentation Open issues AgensGraph: (see here ) CockroachDB: (see here ) HSQLDB: (see here ) IBM Db2 Database: (see here ) OmnisciDB: (see here ) trino: (see here ) VoltDB: (see here ) Version 3.0.2 Release Date: 06.09.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.6.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse Modified Features CockroachDB: DBMS v21.1.8 Exasol: DBMS 7.1.0-d1 / JDBC 7.1.0 IBM Informix: DBMS 14.10.FC5DE-rhm MariaDB Server: DBMS 10.6.4-focal / JDBC 2.7.4 MonetDB: DBMS Jul2021 OmniSciDB: DBMS 5.7.0 / JDBC 5.7.0 Oracle Database: DBMS 21.3.0 / JDBC 21.1.0.0 PostgreSQL: DBMS 13.4 SQL Server: DBMS 2019-CU12-ubuntu-20.04 / JDBC 9.4.0.jre16 SQLite: JDBC 3.36.0.3 TimescaleDB: DBMS 2.4.1-pg13 trino: DBMS 361 / JDBC 361 VoltDB: JDBC 11.0 YugabyteDB: DBMS 2.9.0.0-b4 Open issues CockroachDB: (see here ) HSQLDB: (see here ) IBM Db2 Database: (see here ) OmnisciDB: (see here ) trino: (see here ) VoltDB: (see here ) Version 3.0.1 Release Date: 03.08.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 15, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse Modified Features CUBRID: JDBC 11.0.1.0291 Exasol: JDBC 7.0.11 TimescaleDB: DBMS 2.4.0-pg13 trino: DBMS 360 / JDBC 360 Version 3.0.0 Release Date: 01.08.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 15, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse New Features new control parameter DB_SEEDER_BATCH_SIZE : the maximum number of DML operations of type addBatch - 0 represents all DML operations new control parameter DB_SEEDER_DROP_CONSTRAINTS : if the value is yes , all constraints of the types FOREIGN KEY, PRIMARY KEY and UNIQUE KEY are removed before the first DML operation and are enabled again after the last DML operation TimescaleDB: DBMS 2.3.1-pg13 / JDBC PostgreSQL Modified Features CockroachDB: DBMS v21.1.6 CrateDB: DBMS 4.6.1 Exasol: DBMS 7.0.11 Firebird: DBMS v4.0.0 MariaDB Server: DBMS 10.6.3 MonetDB: JDBC 3.1.jre8 MySQL Database: DBMS 8.0.26 / JDBC 8.0.26 Percona Server for MySQL: DBMS 8.0.25-15 PostgreSQL: JDBC 42.2.23 SQLite: DBMS 3.36.0 / JDBC 3.36.0.1 trino: DBMS 359 / JDBC 359 YugabyteDB: DBMS 2.7.2.0-b216 Version 2.9.1 Release Date: 12.06.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 Eclipse IDE: 2021.03 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 15, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-03\\eclipse Modified Features CockroachDB: DBMS v21.1.2 Exasol: DBMS 7.0.10 HSQLDB embedded: big performance improvement after fixing a bug MonetDB: big performance improvement after introducing manual commit Deleted Features Docker Compose functionality removed Version 2.9.0 Release Date: 04.06.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 16 (e.g.: 16.0.1 from here ) Gradle Build Tool: 7 (e.g.: v7.0.2 from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-03\\eclipse New Features OmniSciDB: DBMS 5.6.1 / JDBC 5.6.0 Modified Features CockroachDB: DBMS v21.1.1 CUBRID: JDBC 11.0.1.0286 Firebird: DBMS v4.0.0rc1 MariaDB Server: DBMS 10.6.1 trino: DBMS 358 / JDBC 358 YugabyteDB: DBMS 2.7.1.1-b1 Version 2.8.2 Release Date: 28.05.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 16 (e.g.: 16.0.1 from here ) Gradle Build Tool: 7 (e.g.: v7.0.2 from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-03\\eclipse Modified Features in Windows 10: replacing grep by find CockroachDB: DBMS v21.1.0 CrateDB: DBMS 4.5.1 Exasol: DBMS 7.0.8 & shutting down the database in the Docker container HSQLDB: JDBC 2.6.0 MariaDB Server: DBMS 10.6.0 / JDBC 2.7.3 MonetDB: DBMS Oct2020-SP5 MySQL Database: DBMS 8.0.25 / JDBC 8.0.25 Percona Server for MySQL: DBMS 8.0.23-14 PostgreSQL: DBMS 13.3 / JDBC 42.2.20 trino: DBMS 356 / JDBC 356 YugabyteDB: DBMS 2.7.1.0-b131 Version 2.8.1 Release Date: 01.04.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) Gradle Build Tool: 6.8.3 grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse Modified Features AgensGraph: DBMS v2.1.3 CockroachDB: DBMS v20.2.7 CrateDB: DBMS 4.5.0 CUBRID: DBMS 11.0 Exasol: DBMS 7.0.8 Firebird: JDBC 4.0.3.java11 HSQLDB: DBMS 2.6.0 IBM Db2 Database: DBMS 11.5.5.1 SQL Server: JDBC 9.2.1.jre15 trino: DBMS 354 / JDBC 354 YugabyteDB: DBMS 2.5.3.1-b10 Version 2.8.0 Release Date: 03.03.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) Gradle Build Tool: 6.8.3 grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse New Features New DBMS: CockroachDB Modified Features Mimer SQL: DBMS v11.0.5a Version 2.7.1 Release Date: 27.02.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse Modified Features CrateDB: DBMS 4.4.1 CUBRID: JDBC 11.0.0.0248 Exasol: DBMS 7.0.7 / JDBC 7.0.7 MariaDB Server: DBMS 10.5.9 / JDBC 2.7.2 MonetDB: DBMS Oct2020-SP3 / JDBC 3.0.jre8 Oracle Database: JDBC 21.1.0.0 PostgreSQL: DBMS 13.2 / JDBC 42.2.19 SQL Server: JDBC 9.2.0.jre15 trino: DBMS 352 / JDBC 352 YugabyteDB: DBMS 2.5.2.0-b104 Version 2.7.0 Release Date: 28.01.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse New Features Rebranding of Presto to trino Modified Features CrateDB: DBMS 4.3.4 Exasol: DBMS 7.0.6 / JDBC 7.0.4 Firebird: JDBC 4.0.2.java11 IBM Db2 Database: DBMS 11.5.5.0 IBM Informix: DBMS 14.10.FC5DE Mimer SQL: JDBC 3.41a Oracle Database: JDBC 19.9.0.0 SQLite: DBMS 3.34.0 / JDBC 3.34.0 trino: DBMS 351 / JDBC 351 YugabyteDB: DBMS 2.5.1.0-b153 Version 2.6.1 Release Date: 28.11.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features CrateDB: DBMS 4.3.1 IBM Db2 Database: JDBC 11.5.5.0 MariaDB Server: DBMS 10.5.8 / JDBC 2.7.1 Mimer SQL: DBMS v11.0.4b MySQL Database: DBMS 8.0.23 / JDBC 8.0.23 PostgreSQL: DBMS 13.1 Presto Distributed Query Engine: DBMS 347 / JDBC 347 Travis CI has been limited to the compilation functionality VoltDB: JDBC 10.1.1 YugabyteDB: DBMS 2.5.0.0-b2 Version 2.6.0 Release Date: 27.10.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here New Features new scripts for creating a summary file from the benchmark data Modified Features CrateDB: DBMS 4.3.0 Exasol: DBMS 7.0.3 / JDBC 7.0.3 Firebird: DBMS 3.0.7 MariaDB Server: DBMS 10.5.6 MySQL Database: DBMS 8.0.22 / JDBC 8.0.22 Oracle Database: JDBC 19.8.0.0 PostgreSQL: JDBC 42.2.18 Presto Distributed Query Engine: DBMS 345 / JDBC 345 Version 2.5.2 Release Date: 05.10.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here New Features Docker Compose functionality added Modified Features YugabyteDB: DBMS 2.3.2.0-b37 Version 2.5.1 Release Date: 29.09.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features CrateDB: DBMS 4.2.4 CUBRID: JDBC 10.2.2.8874 Exasol: DBMS 7.0.2 MariaDB Server: JDBC 2.7.0 PostgreSQL: DBMS 13 Presto Distributed Query Engine: DBMS 343 / JDBC 343 Version 2.5.0 Release Date: 30.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: Exasol Modified Features SQL Server: JDBC 8.4.1.jre14 Version 2.4.0 Release Date: 27.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: AgensGraph New DBMS: VoltDB Version 2.3.0 Release Date: 26.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: Percona Server for MySQL New DBMS: YugabyteDB Modified Features CrateDB: DBMS 4.2.3 PostgreSQL: DBMS 12.4 / JDBC 42.2.15 Version 2.2.0 Release Date: 18.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: MonetDB Modified Features the original image from Presto is now used Version 2.1.3 Release Date: 17.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features PostgreSQL: JDBC 42.2.15 Presto Distributed Query Engine: use of Docker network minor script fixes Version 2.1.2 Release Date: 13.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features minor script fixes. Version 2.1.1 Release Date: 13.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features Demonstration programs for the Presto Connectors Modified Features Firebird: JDBC 4.0.1.java11 MariaDB Server: DBMS 10.5.5 Presto Distributed Query Engine: JDBC 340 solved: PostgreSQL Connector: Cannot insert BLOB using Presto JDBC (see here ). solved: SQL Server Connector: Login failed (see here ). solved: gradle warning with http://maven.cubrid.org (see [here](http://jira.cubrid.org/browse/CBRD-23727 (see here ){:target=\"_blank\"}). Version 2.1.0 Release Date: 11.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features Adding the JDBC driver of the Presto Distributed Query Enginge (see Issue #5 ). Modified Features MariaDB Server: JDBC 2.6.2 SQL Server: JDBC 8.4.0.jre14 Version 2.0.0 Release Date: 02.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features The underlying database schema can now be freely defined using a JSON-based parameter file (Issues 37 , 38 , 39 and 50 ). Modified Features CrateDB: DBMS 4.1.8 SQLite: DBMS 3.32.3 / JDBC 3.32.3.2 Version 2.15.10 Release Date: 14.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features Config.java: reduce number of properties (issue #36) MySQL Database: DBMS & JDBC 8.0.22 Version 2.15.8 Release Date: 13.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features Added complete run and upload of statistics data to Travis CI (issue #42) Scripts restructured and extended (issue #40) Solved IBM Informix issue (issue #41) Version 2.15.5 Release Date: 10.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New batch script: run_db_seeder_complete : Run all DBMS variations New DBMS: Mimer SQL Modified Features CrateDB: DBMS 4.1.8 Firebird: DBMS 3.0.6 IBM Db2 Database: DBMS & JDBC 11.5.4.0 IBM Informix: JDBC 4.50.4.1 Oracle Database: JDBC 19.7.0.0 Version 2.14.0 Release Date: 06.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: IBM Informix Version 2.13.0 Release Date: 01.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: H2 Database Engine Version 2.12.0 Release Date: 29.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: H2 Database Engine Version 2.11.2 Release Date: 26.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) Modified Features introducing encoding support for ISO-8859-1 and UTF-8 Tested DBMS version: MariaDB Server 10.5.4 Version 2.11.0 Release Date: 26.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: Firebird Version 2.8.3 Release Date: 21.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: Apache Derby (both client and embedded version) New DBMS: CUBRID Modified Features Tested DBMS version: MariaDB Server 10.5.3 Tested DBMS version: Oracle database 12c Tested DBMS version: Oracle database 18c Version 2.6.0 Release Date: 16.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: SQLite Version 2.5.0 Release Date: 15.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: CrateDB Version 2.4.0 Release Date: 14.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: IBM Db2 Database Version 2.3.0 Release Date: 12.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: MariaDB Server Version 2.2.0 Release Date: 10.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: PostgreSQL Version 2.1.0 Release Date: 06.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features Documentation New DBMS: SQL Server Travis CI Integration Verification of the data storage Modified Features Adding BLOB and CLOB support Version 2.0.0 Release Date: 01.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: MySQL Database New DBMS: Oracle Database","title":"Release History"},{"location":"release-history/#dbseeder-release-history","text":"","title":"DBSeeder - Release History"},{"location":"release-history/#version-306","text":"Release Date: 01.03.2022","title":"Version 3.0.6"},{"location":"release-history/#system-requirements","text":"Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16 or 17, (e.g. from here )","title":"System Requirements"},{"location":"release-history/#optional","text":"Eclipse IDE: 2021.12 (e.g. from Eclipse Download Page ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-12\\eclipse","title":"optional:"},{"location":"release-history/#new-features","text":"Travis CI replaced by GitHub Actions Use of GitHub pages for user documentation","title":"New Features"},{"location":"release-history/#modified-features","text":"CockroachDB: DBMS v21.2.6 CrateDB: DBMS 4.7.0 Exasol: DBMS 7.1.6 / JDBC 7.1.4 Firebird: DBMS v4.0.1 / JDBC 4.0.4.java11 H2 Database Engine: DBMS 2.1.210 / JDBC 2.1.210 IBM Db2 Database: JDBC 11.5.7.0 IBM Informix: DBMS 14.10.FC7W1DE / JDBC 4.50.7 MariaDB Server: JDBC 3.0.3 Mimer SQL: JDBC 3.42.3 MonetDB: DBMS Jan2022-SP1 / JDBC 3.2.jre8 MySQL Database: DBMS 8.0.28 / JDBC 8.0.28 OmniSciDB: DBMS v5.10.2 / JDBC 5.10.0 Oracle Database: JDBC 21.4.0.0.1 Percona Server for MySQL: DBMS 8.0.26-17 PostgreSQL: DBMS 14.2 / JDBC 42.3.3 SQL Server: DBMS 2019-CU15-ubuntu-20.04 TimescaleDB: DBMS 2.6.0-pg14 trino: DBMS 371 / JDBC 371 YugabyteDB: DBMS 2.12.1.0-b41","title":"Modified Features"},{"location":"release-history/#version-305","text":"Release Date: 14.12.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.12 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 17, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-12\\eclipse Modified Features CockroachDB: DBMS v21.2.2 CrateDB: DBMS 4.6.5 CUBRID: JDBC 11.0.5.0299 Exasol: DBMS 7.1.3 / JDBC 7.1.3 H2 database Engine: DBMS 2.0.202 / JDBC 2.0.202 HSQLDB: DBMS 2.6.1 IBM Db2 Database: DBMS 11.5.7.0 IBM Informix: JDBC 4.50.7 MariaDB Server: DBMS 10.7.1-focal OmniSciDB: DBMS 5.9.0 / JDBC 42.3.1 PostgreSQL: DBMS 14.1 SQL Server: DBMS 2019-CU14-ubuntu-20.04 / JDBC 9.4.1.jre16 TimescaleDB: DBMS 2.5.1-pg14 trino: DBMS 365 / JDBC 365 YugabyteDB: DBMS 2.11.0.1-b1","title":"Version 3.0.5"},{"location":"release-history/#version-304","text":"Release Date: 29.10.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.09 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 17, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-09\\eclipse Modified Features AgensGraph: DBMS v2.5.0 CockroachDB: DBMS v21.1.11 CrateDB: DBMS 4.6.4 CUBRID: JDBC 11.0.3.0293 Exasol: DBMS 7.1.2 / JDBC 7.1.2 Firebird: JDBC 4.0.4.java11 HSQLDB: JDBC 2.6.1 IBM Db2 Database: DBMS 11.5.6.0a IBM Informix: DBMS 14.10.FC6DE / JDBC 4.50.6 MonetDB: DBMS Jul2021-SP1 MySQL Database: DBMS 8.0.27 / JDBC 8.0.27 OmniSciDB: DBMS 5.8.0 Percona Server for MySQL: DBMS 8.0.26-16 PostgreSQL: DBMS 14.0 / JDBC 42.3.0 SQL Server: DBMS 2019-CU13-ubuntu-20.04 TimescaleDB: DBMS 2.5.0-pg14 trino: DBMS 363 / JDBC 363 YugabyteDB: JDBC 42.3.0","title":"Version 3.0.4"},{"location":"release-history/#version-303","text":"Release Date: 12.09.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse New Features Automatic creation of statistics files regarding improvement with and without constraints and total overview of all releases Modified Features Updating and expanding the documentation Open issues AgensGraph: (see here ) CockroachDB: (see here ) HSQLDB: (see here ) IBM Db2 Database: (see here ) OmnisciDB: (see here ) trino: (see here ) VoltDB: (see here )","title":"Version 3.0.3"},{"location":"release-history/#version-302","text":"Release Date: 06.09.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.6.0 (e.g. from Docker for Windows release notes ) Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse Modified Features CockroachDB: DBMS v21.1.8 Exasol: DBMS 7.1.0-d1 / JDBC 7.1.0 IBM Informix: DBMS 14.10.FC5DE-rhm MariaDB Server: DBMS 10.6.4-focal / JDBC 2.7.4 MonetDB: DBMS Jul2021 OmniSciDB: DBMS 5.7.0 / JDBC 5.7.0 Oracle Database: DBMS 21.3.0 / JDBC 21.1.0.0 PostgreSQL: DBMS 13.4 SQL Server: DBMS 2019-CU12-ubuntu-20.04 / JDBC 9.4.0.jre16 SQLite: JDBC 3.36.0.3 TimescaleDB: DBMS 2.4.1-pg13 trino: DBMS 361 / JDBC 361 VoltDB: JDBC 11.0 YugabyteDB: DBMS 2.9.0.0-b4 Open issues CockroachDB: (see here ) HSQLDB: (see here ) IBM Db2 Database: (see here ) OmnisciDB: (see here ) trino: (see here ) VoltDB: (see here )","title":"Version 3.0.2"},{"location":"release-history/#version-301","text":"Release Date: 03.08.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 15, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse Modified Features CUBRID: JDBC 11.0.1.0291 Exasol: JDBC 7.0.11 TimescaleDB: DBMS 2.4.0-pg13 trino: DBMS 360 / JDBC 360","title":"Version 3.0.1"},{"location":"release-history/#version-300","text":"Release Date: 01.08.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 Eclipse IDE: 2021.06 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 15, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-06\\eclipse New Features new control parameter DB_SEEDER_BATCH_SIZE : the maximum number of DML operations of type addBatch - 0 represents all DML operations new control parameter DB_SEEDER_DROP_CONSTRAINTS : if the value is yes , all constraints of the types FOREIGN KEY, PRIMARY KEY and UNIQUE KEY are removed before the first DML operation and are enabled again after the last DML operation TimescaleDB: DBMS 2.3.1-pg13 / JDBC PostgreSQL Modified Features CockroachDB: DBMS v21.1.6 CrateDB: DBMS 4.6.1 Exasol: DBMS 7.0.11 Firebird: DBMS v4.0.0 MariaDB Server: DBMS 10.6.3 MonetDB: JDBC 3.1.jre8 MySQL Database: DBMS 8.0.26 / JDBC 8.0.26 Percona Server for MySQL: DBMS 8.0.25-15 PostgreSQL: JDBC 42.2.23 SQLite: DBMS 3.36.0 / JDBC 3.36.0.1 trino: DBMS 359 / JDBC 359 YugabyteDB: DBMS 2.7.2.0-b216","title":"Version 3.0.0"},{"location":"release-history/#version-291","text":"Release Date: 12.06.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 Eclipse IDE: 2021.03 (e.g. from Eclipse Download Page ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 15, (e.g. from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-03\\eclipse Modified Features CockroachDB: DBMS v21.1.2 Exasol: DBMS 7.0.10 HSQLDB embedded: big performance improvement after fixing a bug MonetDB: big performance improvement after introducing manual commit Deleted Features Docker Compose functionality removed","title":"Version 2.9.1"},{"location":"release-history/#version-290","text":"Release Date: 04.06.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 16 (e.g.: 16.0.1 from here ) Gradle Build Tool: 7 (e.g.: v7.0.2 from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-03\\eclipse New Features OmniSciDB: DBMS 5.6.1 / JDBC 5.6.0 Modified Features CockroachDB: DBMS v21.1.1 CUBRID: JDBC 11.0.1.0286 Firebird: DBMS v4.0.0rc1 MariaDB Server: DBMS 10.6.1 trino: DBMS 358 / JDBC 358 YugabyteDB: DBMS 2.7.1.1-b1","title":"Version 2.9.0"},{"location":"release-history/#version-282","text":"Release Date: 28.05.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 16 (e.g.: 16.0.1 from here ) Gradle Build Tool: 7 (e.g.: v7.0.2 from here ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-03\\eclipse Modified Features in Windows 10: replacing grep by find CockroachDB: DBMS v21.1.0 CrateDB: DBMS 4.5.1 Exasol: DBMS 7.0.8 & shutting down the database in the Docker container HSQLDB: JDBC 2.6.0 MariaDB Server: DBMS 10.6.0 / JDBC 2.7.3 MonetDB: DBMS Oct2020-SP5 MySQL Database: DBMS 8.0.25 / JDBC 8.0.25 Percona Server for MySQL: DBMS 8.0.23-14 PostgreSQL: DBMS 13.3 / JDBC 42.2.20 trino: DBMS 356 / JDBC 356 YugabyteDB: DBMS 2.7.1.0-b131","title":"Version 2.8.2"},{"location":"release-history/#version-281","text":"Release Date: 01.04.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) Gradle Build Tool: 6.8.3 grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse Modified Features AgensGraph: DBMS v2.1.3 CockroachDB: DBMS v20.2.7 CrateDB: DBMS 4.5.0 CUBRID: DBMS 11.0 Exasol: DBMS 7.0.8 Firebird: JDBC 4.0.3.java11 HSQLDB: DBMS 2.6.0 IBM Db2 Database: DBMS 11.5.5.1 SQL Server: JDBC 9.2.1.jre15 trino: DBMS 354 / JDBC 354 YugabyteDB: DBMS 2.5.3.1-b10","title":"Version 2.8.1"},{"location":"release-history/#version-280","text":"Release Date: 03.03.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) Gradle Build Tool: 6.8.3 grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse New Features New DBMS: CockroachDB Modified Features Mimer SQL: DBMS v11.0.5a","title":"Version 2.8.0"},{"location":"release-history/#version-271","text":"Release Date: 27.02.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse Modified Features CrateDB: DBMS 4.4.1 CUBRID: JDBC 11.0.0.0248 Exasol: DBMS 7.0.7 / JDBC 7.0.7 MariaDB Server: DBMS 10.5.9 / JDBC 2.7.2 MonetDB: DBMS Oct2020-SP3 / JDBC 3.0.jre8 Oracle Database: JDBC 21.1.0.0 PostgreSQL: DBMS 13.2 / JDBC 42.2.19 SQL Server: JDBC 9.2.0.jre15 trino: DBMS 352 / JDBC 352 YugabyteDB: DBMS 2.5.2.0-b104","title":"Version 2.7.1"},{"location":"release-history/#version-270","text":"Release Date: 28.01.2021 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 3.0.4 open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2020-12\\eclipse New Features Rebranding of Presto to trino Modified Features CrateDB: DBMS 4.3.4 Exasol: DBMS 7.0.6 / JDBC 7.0.4 Firebird: JDBC 4.0.2.java11 IBM Db2 Database: DBMS 11.5.5.0 IBM Informix: DBMS 14.10.FC5DE Mimer SQL: JDBC 3.41a Oracle Database: JDBC 19.9.0.0 SQLite: DBMS 3.34.0 / JDBC 3.34.0 trino: DBMS 351 / JDBC 351 YugabyteDB: DBMS 2.5.1.0-b153","title":"Version 2.7.0"},{"location":"release-history/#version-261","text":"Release Date: 28.11.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features CrateDB: DBMS 4.3.1 IBM Db2 Database: JDBC 11.5.5.0 MariaDB Server: DBMS 10.5.8 / JDBC 2.7.1 Mimer SQL: DBMS v11.0.4b MySQL Database: DBMS 8.0.23 / JDBC 8.0.23 PostgreSQL: DBMS 13.1 Presto Distributed Query Engine: DBMS 347 / JDBC 347 Travis CI has been limited to the compilation functionality VoltDB: JDBC 10.1.1 YugabyteDB: DBMS 2.5.0.0-b2","title":"Version 2.6.1"},{"location":"release-history/#version-260","text":"Release Date: 27.10.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here New Features new scripts for creating a summary file from the benchmark data Modified Features CrateDB: DBMS 4.3.0 Exasol: DBMS 7.0.3 / JDBC 7.0.3 Firebird: DBMS 3.0.7 MariaDB Server: DBMS 10.5.6 MySQL Database: DBMS 8.0.22 / JDBC 8.0.22 Oracle Database: JDBC 19.8.0.0 PostgreSQL: JDBC 42.2.18 Presto Distributed Query Engine: DBMS 345 / JDBC 345","title":"Version 2.6.0"},{"location":"release-history/#version-252","text":"Release Date: 05.10.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here New Features Docker Compose functionality added Modified Features YugabyteDB: DBMS 2.3.2.0-b37","title":"Version 2.5.2"},{"location":"release-history/#version-251","text":"Release Date: 29.09.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 15 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features CrateDB: DBMS 4.2.4 CUBRID: JDBC 10.2.2.8874 Exasol: DBMS 7.0.2 MariaDB Server: JDBC 2.7.0 PostgreSQL: DBMS 13 Presto Distributed Query Engine: DBMS 343 / JDBC 343","title":"Version 2.5.1"},{"location":"release-history/#version-250","text":"Release Date: 30.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: Exasol Modified Features SQL Server: JDBC 8.4.1.jre14","title":"Version 2.5.0"},{"location":"release-history/#version-240","text":"Release Date: 27.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: AgensGraph New DBMS: VoltDB","title":"Version 2.4.0"},{"location":"release-history/#version-230","text":"Release Date: 26.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: Percona Server for MySQL New DBMS: YugabyteDB Modified Features CrateDB: DBMS 4.2.3 PostgreSQL: DBMS 12.4 / JDBC 42.2.15","title":"Version 2.3.0"},{"location":"release-history/#version-220","text":"Release Date: 18.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New DBMS: MonetDB Modified Features the original image from Presto is now used","title":"Version 2.2.0"},{"location":"release-history/#version-213","text":"Release Date: 17.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features PostgreSQL: JDBC 42.2.15 Presto Distributed Query Engine: use of Docker network minor script fixes","title":"Version 2.1.3"},{"location":"release-history/#version-212","text":"Release Date: 13.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features minor script fixes.","title":"Version 2.1.2"},{"location":"release-history/#version-211","text":"Release Date: 13.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features Demonstration programs for the Presto Connectors Modified Features Firebird: JDBC 4.0.1.java11 MariaDB Server: DBMS 10.5.5 Presto Distributed Query Engine: JDBC 340 solved: PostgreSQL Connector: Cannot insert BLOB using Presto JDBC (see here ). solved: SQL Server Connector: Login failed (see here ). solved: gradle warning with http://maven.cubrid.org (see [here](http://jira.cubrid.org/browse/CBRD-23727 (see here ){:target=\"_blank\"}).","title":"Version 2.1.1"},{"location":"release-history/#version-210","text":"Release Date: 11.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features Adding the JDBC driver of the Presto Distributed Query Enginge (see Issue #5 ). Modified Features MariaDB Server: JDBC 2.6.2 SQL Server: JDBC 8.4.0.jre14","title":"Version 2.1.0"},{"location":"release-history/#version-200","text":"Release Date: 02.08.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features The underlying database schema can now be freely defined using a JSON-based parameter file (Issues 37 , 38 , 39 and 50 ). Modified Features CrateDB: DBMS 4.1.8 SQLite: DBMS 3.32.3 / JDBC 3.32.3.2","title":"Version 2.0.0"},{"location":"release-history/#version-21510","text":"Release Date: 14.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features Config.java: reduce number of properties (issue #36) MySQL Database: DBMS & JDBC 8.0.22","title":"Version 2.15.10"},{"location":"release-history/#version-2158","text":"Release Date: 13.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here Modified Features Added complete run and upload of statistics data to Travis CI (issue #42) Scripts restructured and extended (issue #40) Solved IBM Informix issue (issue #41)","title":"Version 2.15.8"},{"location":"release-history/#version-2155","text":"Release Date: 10.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) grep utility, e.g. for Windows from here New Features New batch script: run_db_seeder_complete : Run all DBMS variations New DBMS: Mimer SQL Modified Features CrateDB: DBMS 4.1.8 Firebird: DBMS 3.0.6 IBM Db2 Database: DBMS & JDBC 11.5.4.0 IBM Informix: JDBC 4.50.4.1 Oracle Database: JDBC 19.7.0.0","title":"Version 2.15.5"},{"location":"release-history/#version-2140","text":"Release Date: 06.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: IBM Informix","title":"Version 2.14.0"},{"location":"release-history/#version-2130","text":"Release Date: 01.07.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: H2 Database Engine","title":"Version 2.13.0"},{"location":"release-history/#version-2120","text":"Release Date: 29.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: H2 Database Engine","title":"Version 2.12.0"},{"location":"release-history/#version-2112","text":"Release Date: 26.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) Modified Features introducing encoding support for ISO-8859-1 and UTF-8 Tested DBMS version: MariaDB Server 10.5.4","title":"Version 2.11.2"},{"location":"release-history/#version-2110","text":"Release Date: 26.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: Firebird","title":"Version 2.11.0"},{"location":"release-history/#version-283","text":"Release Date: 21.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: Apache Derby (both client and embedded version) New DBMS: CUBRID Modified Features Tested DBMS version: MariaDB Server 10.5.3 Tested DBMS version: Oracle database 12c Tested DBMS version: Oracle database 18c","title":"Version 2.8.3"},{"location":"release-history/#version-260_1","text":"Release Date: 16.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: SQLite","title":"Version 2.6.0"},{"location":"release-history/#version-250_1","text":"Release Date: 15.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: CrateDB","title":"Version 2.5.0"},{"location":"release-history/#version-240_1","text":"Release Date: 14.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: IBM Db2 Database","title":"Version 2.4.0"},{"location":"release-history/#version-230_1","text":"Release Date: 12.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: MariaDB Server","title":"Version 2.3.0"},{"location":"release-history/#version-220_1","text":"Release Date: 10.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: PostgreSQL","title":"Version 2.2.0"},{"location":"release-history/#version-210_1","text":"Release Date: 06.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features Documentation New DBMS: SQL Server Travis CI Integration Verification of the data storage Modified Features Adding BLOB and CLOB support","title":"Version 2.1.0"},{"location":"release-history/#version-200_1","text":"Release Date: 01.06.2020 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant open-source JDK Version 14 (e.g.: from here ) New Features New DBMS: MySQL Database New DBMS: Oracle Database","title":"Version 2.0.0"},{"location":"release-notes/","text":"DBSeeder - Release Notes Version 3.0.7 Release Date: dd.mm.2022 System Requirements Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16 or 17, (e.g. from here ) optional: Eclipse IDE: 2021.12 (e.g. from Eclipse Download Page ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-12\\eclipse New Features Rebranding from OmniSciDB to HeavyDB Modified Features AgensGraph: DBMS v2.13.0 Apache Derby: DBMS 10.16.1.1 / JDBC 10.16.1.1 CockroachDB: DBMS v22.1.12 CrateDB: DBMS 5.1.12 CUBRID: DBMS 11.2 / JDBC 11.1.0.0028 Exasol: DBMS 7.1.16 / JDBC 7.1.16 Firebird: DBMS v4.0.2 / JDBC 4.0.8.java11 H2 Database Engine: DBMS 2.1.214 / JDBC 2.1.214 HeavyDB: DBMS v6.2.0 / JDBC 6.1.0 HSQLDB: DBMS 2.7.0 IBM Db2 Database: DBMS 11.5.8.0 / JDBC 11.5.8.0 IBM Informix: JDBC 4.50.9 MariaDB Server: DBMS 10.10.2 / JDBC 3.1.0 MonetDB: DBMS Sep2022-SP1 MySQL Database: DBMS 8.0.31 / JDBC 8.0.31 Oracle Database: JDBC 21.8.0.0 Percona Server for MySQL: DBMS 8.0.30-22 PostgreSQL: DBMS 15.1 / JDBC 42.5.1 SQL Server: DBMS 2022-latest / JDBC 11.2.2.jre18 SQLite: JDBC 3.40.0.0 TimescaleDB: DBMS 2.9.0-pg14 trino: DBMS 403 / JDBC 403 VoltDB: JDBC 11.4.2 YugabyteDB: DBMS 2.17.0.0-b24 Deleted Features n/a Open Issues HeavyDB: (see here HSQLDB: (see here MonetDB: (see here trino: (see here VoltDB: (see here Windows 10 Performance Snapshot The finishing touch to the work on a new release is a test run with all databases under identical conditions on three different systems - Ubuntu 20.04 via VMware and WSL2, Windows 10. The measured time includes the total time required for the DDL effort (database, schema, user, 5 database tables) and the DML effort (insertion of 7011 rows). The hardware used includes an AMD Ryzen 9 5950X CPU with 128GB RAM. The tests run exclusively on the computer in each case. The detailed results can be found in the DBSeeder repository in the resources/statistics directory. The following table shows the results of the Windows 10 run. If the database can run with both activated and deactivated constraints (foreign, primary and unique key), the table shows the better value and in the column Improvement the relative value to the worse run. For example, the MonetDB database is faster with inactive constraints by 17.5 % compared to the run with activated constraints. DBMS - official DBMS name Type - client version, embedded version or via trino ms - total time of DDL and DML operations in milliseconds Constraints - DML operations with active or inactive constraints (foreign, primary and unique key) Improvment - improvement of total time if constraints are inactive Detailed Open Issues HeavyDB Issue: java.lang.ClassNotFoundException: com.omnisci.jdbc.omnisciDriver. 2022-12-21 09:22:16,341 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =heavy 2022-12-21 09:22:16,348 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =heavy 2022-12-21 09:22:16,359 [Statistics.java] INFO missing statistics file created: file name=resources/statistics/db_seeder_statistics.tsv java.lang.ClassNotFoundException: com.omnisci.jdbc.omnisciDriver at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641) at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) at java.base/java.lang.Class.forName0(Native Method) at java.base/java.lang.Class.forName(Class.java:390) at java.base/java.lang.Class.forName(Class.java:381) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:314) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:286) at ch.konnexions.db_seeder.jdbc.heavy.HeavySeeder.setupDatabase(HeavySeeder.java:93) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:410) at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:154) Processing of the script was aborted, error code=1 HSQLDB Issue: org.hsqldb.HsqlException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100. The problem only occurs with the \"DROP CONSTRAINTS\" functionality. 2022-02-28 08:13:28,758 [DatabaseSeeder.java] INFO tickerSymbolAnyCase='hsqldb_emb' 2022-02-28 08:13:28,758 [DatabaseSeeder.java] INFO Start HSQLDB [embedded] 2022-02-28 08:13:28,763 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =hsqldb 2022-02-28 08:13:28,771 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =hsqldb_emb java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100 at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source) at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.executeSQLStmnts(AbstractJdbcSeeder.java:1367) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.dropTableConstraints(AbstractJdbcSeeder.java:1236) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:427) at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:160) Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100 at org.hsqldb.error.Error.error(Unknown Source) at org.hsqldb.error.Error.error(Unknown Source) at org.hsqldb.SchemaManager.getSchemaObject(Unknown Source) at org.hsqldb.ParserDQL.readSchemaObjectName(Unknown Source) at org.hsqldb.ParserDDL.compileAlterTableDropConstraint(Unknown Source) at org.hsqldb.ParserDDL.compileAlterTable(Unknown Source) at org.hsqldb.ParserDDL.compileAlter(Unknown Source) at org.hsqldb.ParserCommand.compilePart(Unknown Source) at org.hsqldb.ParserCommand.compileStatements(Unknown Source) at org.hsqldb.Session.executeDirectStatement(Unknown Source) at org.hsqldb.Session.execute(Unknown Source) ... 6 more MonetDB Issue: java.sql.SQLNonTransientConnectionException. 2022-12-21 09:59:18,739 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =monetdb 2022-12-21 09:59:18,747 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =monetdb java.sql.SQLNonTransientConnectionException: at org.monetdb.jdbc.MonetConnection.<init>(Unknown Source) at org.monetdb.jdbc.MonetDriver.connect(Unknown Source) at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:683) at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:253) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:332) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:269) at ch.konnexions.db_seeder.jdbc.monetdb.MonetdbSeeder.setupDatabase(MonetdbSeeder.java:145) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:410) at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:196) Caused by: org.monetdb.mcl.MCLException: monetdbd: no such database 'demo', please create it first at org.monetdb.mcl.net.MapiSocket.connect(Unknown Source) at org.monetdb.mcl.net.MapiSocket.connect(Unknown Source) ... 9 more Processing of the script was aborted, error code=1 trino Issue: all connectors: absolutely unsatisfactory performance (see here ). Check Add support for DatabaseMetaData.getImportedKeys in Trino JDBC VoltDB Issue: Java 16 not yet supported: java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null 2021-09-02 03:39:41,112 [DatabaseSeeder.java] INFO tickerSymbolAnyCase='voltdb' 2021-09-02 03:39:41,112 [DatabaseSeeder.java] INFO Start VoltDB 2021-09-02 03:39:41,117 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =voltdb 2021-09-02 03:39:41,127 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =voltdb java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null at org.voltcore.network.VoltNetwork.optimizedInvokeCallbacks(VoltNetwork.java:478) at org.voltcore.network.VoltNetwork.run(VoltNetwork.java:329) at java.base/java.lang.Thread.run(Thread.java:831) Sept. 02, 2021 3:39:41 AM org.voltcore.logging.VoltUtilLoggingLogger log SEVERE: NULL : Throwable: java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null at org.voltcore.network.VoltNetwork.optimizedInvokeCallbacks(VoltNetwork.java:478) at org.voltcore.network.VoltNetwork.run(VoltNetwork.java:329) at java.base/java.lang.Thread.run(Thread.java:831) Sept. 02, 2021 3:39:41 AM org.voltcore.logging.VoltUtilLoggingLogger log SEVERE: NULL : Throwable: java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null","title":"Release Notes"},{"location":"release-notes/#dbseeder-release-notes","text":"","title":"DBSeeder - Release Notes"},{"location":"release-notes/#version-307","text":"Release Date: dd.mm.2022","title":"Version 3.0.7"},{"location":"release-notes/#system-requirements","text":"Operating system: any Java-enabled Linux, Mac or Windows variant Docker Desktop Community: 4.0.0 (e.g. from Docker for Windows release notes ) Gradle Build Tool: 7 (e.g. from here ) Java Development Kit 16 or 17, (e.g. from here )","title":"System Requirements"},{"location":"release-notes/#optional","text":"Eclipse IDE: 2021.12 (e.g. from Eclipse Download Page ) an environment variable called HOME_ECLIPSE that points to the installation directory of Eclipse IDE, e.g.: C:\\Software\\eclipse\\java-2021-12\\eclipse","title":"optional:"},{"location":"release-notes/#new-features","text":"Rebranding from OmniSciDB to HeavyDB","title":"New Features"},{"location":"release-notes/#modified-features","text":"AgensGraph: DBMS v2.13.0 Apache Derby: DBMS 10.16.1.1 / JDBC 10.16.1.1 CockroachDB: DBMS v22.1.12 CrateDB: DBMS 5.1.12 CUBRID: DBMS 11.2 / JDBC 11.1.0.0028 Exasol: DBMS 7.1.16 / JDBC 7.1.16 Firebird: DBMS v4.0.2 / JDBC 4.0.8.java11 H2 Database Engine: DBMS 2.1.214 / JDBC 2.1.214 HeavyDB: DBMS v6.2.0 / JDBC 6.1.0 HSQLDB: DBMS 2.7.0 IBM Db2 Database: DBMS 11.5.8.0 / JDBC 11.5.8.0 IBM Informix: JDBC 4.50.9 MariaDB Server: DBMS 10.10.2 / JDBC 3.1.0 MonetDB: DBMS Sep2022-SP1 MySQL Database: DBMS 8.0.31 / JDBC 8.0.31 Oracle Database: JDBC 21.8.0.0 Percona Server for MySQL: DBMS 8.0.30-22 PostgreSQL: DBMS 15.1 / JDBC 42.5.1 SQL Server: DBMS 2022-latest / JDBC 11.2.2.jre18 SQLite: JDBC 3.40.0.0 TimescaleDB: DBMS 2.9.0-pg14 trino: DBMS 403 / JDBC 403 VoltDB: JDBC 11.4.2 YugabyteDB: DBMS 2.17.0.0-b24","title":"Modified Features"},{"location":"release-notes/#deleted-features","text":"n/a","title":"Deleted Features"},{"location":"release-notes/#open-issues","text":"HeavyDB: (see here HSQLDB: (see here MonetDB: (see here trino: (see here VoltDB: (see here","title":"Open Issues"},{"location":"release-notes/#windows-10-performance-snapshot","text":"The finishing touch to the work on a new release is a test run with all databases under identical conditions on three different systems - Ubuntu 20.04 via VMware and WSL2, Windows 10. The measured time includes the total time required for the DDL effort (database, schema, user, 5 database tables) and the DML effort (insertion of 7011 rows). The hardware used includes an AMD Ryzen 9 5950X CPU with 128GB RAM. The tests run exclusively on the computer in each case. The detailed results can be found in the DBSeeder repository in the resources/statistics directory. The following table shows the results of the Windows 10 run. If the database can run with both activated and deactivated constraints (foreign, primary and unique key), the table shows the better value and in the column Improvement the relative value to the worse run. For example, the MonetDB database is faster with inactive constraints by 17.5 % compared to the run with activated constraints. DBMS - official DBMS name Type - client version, embedded version or via trino ms - total time of DDL and DML operations in milliseconds Constraints - DML operations with active or inactive constraints (foreign, primary and unique key) Improvment - improvement of total time if constraints are inactive","title":"Windows 10 Performance Snapshot"},{"location":"release-notes/#detailed-open-issues","text":"","title":"Detailed Open Issues"},{"location":"release-notes/#heavydb","text":"Issue: java.lang.ClassNotFoundException: com.omnisci.jdbc.omnisciDriver. 2022-12-21 09:22:16,341 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =heavy 2022-12-21 09:22:16,348 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =heavy 2022-12-21 09:22:16,359 [Statistics.java] INFO missing statistics file created: file name=resources/statistics/db_seeder_statistics.tsv java.lang.ClassNotFoundException: com.omnisci.jdbc.omnisciDriver at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641) at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) at java.base/java.lang.Class.forName0(Native Method) at java.base/java.lang.Class.forName(Class.java:390) at java.base/java.lang.Class.forName(Class.java:381) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:314) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:286) at ch.konnexions.db_seeder.jdbc.heavy.HeavySeeder.setupDatabase(HeavySeeder.java:93) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:410) at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:154) Processing of the script was aborted, error code=1","title":" HeavyDB"},{"location":"release-notes/#hsqldb","text":"Issue: org.hsqldb.HsqlException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100. The problem only occurs with the \"DROP CONSTRAINTS\" functionality. 2022-02-28 08:13:28,758 [DatabaseSeeder.java] INFO tickerSymbolAnyCase='hsqldb_emb' 2022-02-28 08:13:28,758 [DatabaseSeeder.java] INFO Start HSQLDB [embedded] 2022-02-28 08:13:28,763 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =hsqldb 2022-02-28 08:13:28,771 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =hsqldb_emb java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100 at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source) at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.executeSQLStmnts(AbstractJdbcSeeder.java:1367) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.dropTableConstraints(AbstractJdbcSeeder.java:1236) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:427) at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:160) Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100 at org.hsqldb.error.Error.error(Unknown Source) at org.hsqldb.error.Error.error(Unknown Source) at org.hsqldb.SchemaManager.getSchemaObject(Unknown Source) at org.hsqldb.ParserDQL.readSchemaObjectName(Unknown Source) at org.hsqldb.ParserDDL.compileAlterTableDropConstraint(Unknown Source) at org.hsqldb.ParserDDL.compileAlterTable(Unknown Source) at org.hsqldb.ParserDDL.compileAlter(Unknown Source) at org.hsqldb.ParserCommand.compilePart(Unknown Source) at org.hsqldb.ParserCommand.compileStatements(Unknown Source) at org.hsqldb.Session.executeDirectStatement(Unknown Source) at org.hsqldb.Session.execute(Unknown Source) ... 6 more","title":" HSQLDB"},{"location":"release-notes/#monetdb","text":"Issue: java.sql.SQLNonTransientConnectionException. 2022-12-21 09:59:18,739 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =monetdb 2022-12-21 09:59:18,747 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =monetdb java.sql.SQLNonTransientConnectionException: at org.monetdb.jdbc.MonetConnection.<init>(Unknown Source) at org.monetdb.jdbc.MonetDriver.connect(Unknown Source) at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:683) at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:253) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:332) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.connect(AbstractJdbcSeeder.java:269) at ch.konnexions.db_seeder.jdbc.monetdb.MonetdbSeeder.setupDatabase(MonetdbSeeder.java:145) at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:410) at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:196) Caused by: org.monetdb.mcl.MCLException: monetdbd: no such database 'demo', please create it first at org.monetdb.mcl.net.MapiSocket.connect(Unknown Source) at org.monetdb.mcl.net.MapiSocket.connect(Unknown Source) ... 9 more Processing of the script was aborted, error code=1","title":" MonetDB"},{"location":"release-notes/#trino","text":"Issue: all connectors: absolutely unsatisfactory performance (see here ). Check Add support for DatabaseMetaData.getImportedKeys in Trino JDBC","title":" trino"},{"location":"release-notes/#voltdb","text":"Issue: Java 16 not yet supported: java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null 2021-09-02 03:39:41,112 [DatabaseSeeder.java] INFO tickerSymbolAnyCase='voltdb' 2021-09-02 03:39:41,112 [DatabaseSeeder.java] INFO Start VoltDB 2021-09-02 03:39:41,117 [AbstractDbmsSeeder.java] INFO tickerSymbolIntern =voltdb 2021-09-02 03:39:41,127 [AbstractJdbcSeeder.java] INFO tickerSymbolExtern =voltdb java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null at org.voltcore.network.VoltNetwork.optimizedInvokeCallbacks(VoltNetwork.java:478) at org.voltcore.network.VoltNetwork.run(VoltNetwork.java:329) at java.base/java.lang.Thread.run(Thread.java:831) Sept. 02, 2021 3:39:41 AM org.voltcore.logging.VoltUtilLoggingLogger log SEVERE: NULL : Throwable: java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null at org.voltcore.network.VoltNetwork.optimizedInvokeCallbacks(VoltNetwork.java:478) at org.voltcore.network.VoltNetwork.run(VoltNetwork.java:329) at java.base/java.lang.Thread.run(Thread.java:831) Sept. 02, 2021 3:39:41 AM org.voltcore.logging.VoltUtilLoggingLogger log SEVERE: NULL : Throwable: java.lang.NullPointerException: Cannot invoke \"io.netty_voltpatches.NinjaKeySet.size()\" because \"this.m_ninjaSelectedKeys\" is null","title":" VoltDB"},{"location":"release_schedule/","text":"DBSeeder - Release Schedule To create a new release, the following steps must be performed in the specified order. It is not allowed to continue with the next step until the current step has been completed successfully, i.e. also without any errors. 1. Manual quality control . a) Remove all personal markers. It is good practice to mark experimental source code, such as source code comments or logging messages that are only used for testing, with a uniform personal marker, such as lho or wwe , so that this source code can be easily discovered and removed for release builds. b) Check all TODO markers for necessity. c) Check all links in the docs file directory. Links should generally contain the following suffix: {:target=\"_blank\"} . This ensures that a web page activated by the link is opened in a new tab. d) Unnecessary annotations @pytest.mark.issue in the file directory tests . This annotation can be used to run individual tests selectively. To remove the remains of it one can use the regular expression ^@pytest.mark.issue . 2. Define a new version number . The rules of semantic versioning must be applied. Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes MINOR version when you add functionality in a backwards compatible manner PATCH version when you make backwards compatible bug fixes See here for details. a) Update the version number in the IO-AVSTATS files: docs/release_history.md docs/release_notes.md src//io_glob.py 3. Create release candidate branch <rel_branch> . 4. Switch to the release candidate branch <rel_branch> . git checkout <rel_branch> 5. Finalise the new release . a. Execute the following command in the IO-AVSTATS clone. make final b. Create the final pull request. c. Create the new release in GitHub: Releases --> Create a new release Choose a tag ---> 9.9.9 ---> + Create a new tag Release title ---> Release 9.9.9: <headline> . Describe the release ---> see: https://github.com/io-aero/io-avstats/blob/main/docs/release_notes.md x This is a pre-release x Create a discussion for this release Publish release 6. Preepare the next release . a. Choose a new version number. b. Prepare the following files in the io-rsaster repository for the new version: docs/release_history.md docs/release_notes.md src//io_glob.py","title":"Release Schedule"},{"location":"release_schedule/#dbseeder-release-schedule","text":"To create a new release, the following steps must be performed in the specified order. It is not allowed to continue with the next step until the current step has been completed successfully, i.e. also without any errors.","title":"DBSeeder - Release Schedule"},{"location":"release_schedule/#1-manual-quality-control","text":"","title":"1. Manual quality control."},{"location":"release_schedule/#a-remove-all-personal-markers","text":"It is good practice to mark experimental source code, such as source code comments or logging messages that are only used for testing, with a uniform personal marker, such as lho or wwe , so that this source code can be easily discovered and removed for release builds.","title":"a) Remove all personal markers."},{"location":"release_schedule/#b-check-all-todo-markers-for-necessity","text":"","title":"b) Check all TODO markers for necessity."},{"location":"release_schedule/#c-check-all-links-in-the-docs-file-directory","text":"Links should generally contain the following suffix: {:target=\"_blank\"} . This ensures that a web page activated by the link is opened in a new tab.","title":"c) Check all links in the docs file directory."},{"location":"release_schedule/#d-unnecessary-annotations-pytestmarkissue-in-the-file-directory-tests","text":"This annotation can be used to run individual tests selectively. To remove the remains of it one can use the regular expression ^@pytest.mark.issue .","title":"d) Unnecessary annotations @pytest.mark.issue in the file directory tests."},{"location":"release_schedule/#2-define-a-new-version-number","text":"The rules of semantic versioning must be applied. Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes MINOR version when you add functionality in a backwards compatible manner PATCH version when you make backwards compatible bug fixes See here for details.","title":"2. Define a new version number."},{"location":"release_schedule/#a-update-the-version-number-in-the-io-avstats-files","text":"docs/release_history.md docs/release_notes.md src//io_glob.py","title":"a) Update the version number in the IO-AVSTATS files:"},{"location":"release_schedule/#3-create-release-candidate-branch-rel_branch","text":"","title":"3. Create release candidate branch &lt;rel_branch&gt;."},{"location":"release_schedule/#4-switch-to-the-release-candidate-branch-rel_branch","text":"git checkout <rel_branch>","title":"4. Switch to the release candidate branch &lt;rel_branch&gt;."},{"location":"release_schedule/#5-finalise-the-new-release","text":"","title":"5. Finalise the new release."},{"location":"release_schedule/#a-execute-the-following-command-in-the-io-avstats-clone","text":"make final","title":"a. Execute the following command in the IO-AVSTATS clone."},{"location":"release_schedule/#b-create-the-final-pull-request","text":"","title":"b. Create the final pull request."},{"location":"release_schedule/#c-create-the-new-release-in-github","text":"Releases --> Create a new release Choose a tag ---> 9.9.9 ---> + Create a new tag Release title ---> Release 9.9.9: <headline> . Describe the release ---> see: https://github.com/io-aero/io-avstats/blob/main/docs/release_notes.md x This is a pre-release x Create a discussion for this release Publish release","title":"c. Create the new release in GitHub:"},{"location":"release_schedule/#6-preepare-the-next-release","text":"","title":"6. Preepare the next release."},{"location":"release_schedule/#a-choose-a-new-version-number","text":"","title":"a. Choose a new version number."},{"location":"release_schedule/#b-prepare-the-following-files-in-the-io-rsaster-repository-for-the-new-version","text":"docs/release_history.md docs/release_notes.md src//io_glob.py","title":"b. Prepare the following files in the io-rsaster repository for the new version:"}]}